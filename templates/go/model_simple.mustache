// {{classname}} {{{description}}}{{^description}}struct for {{{classname}}}{{/description}}
type {{classname}} struct {
{{#parent}}
{{^isMap}}
{{^isArray}}
	{{{parent}}}
{{/isArray}}
{{/isMap}}
{{#isArray}}
	Items {{{parent}}}
{{/isArray}}
{{/parent}}
{{#vars}}
{{#description}}
	// {{{.}}}
{{/description}}
{{#deprecated}}
	// Deprecated
{{/deprecated}}
	{{name}} {{#isModel}}*{{/isModel}}{{{dataType}}} `json:"{{baseName}}{{^required}},omitempty{{/required}}"{{#vendorExtensions.x-go-custom-tag}} {{{.}}}{{/vendorExtensions.x-go-custom-tag}}`
{{/vars}}
{{#isAdditionalPropertiesTrue}}
	AdditionalProperties map[string]any `json:",inline"`
{{/isAdditionalPropertiesTrue}}
}

{{#isAdditionalPropertiesTrue}}
type _{{{classname}}} {{{classname}}}

{{/isAdditionalPropertiesTrue}}
{{#hasOptional}}
type {{{classname}}}Option func(f *{{{classname}}})

{{/hasOptional}}
{{#optionalVars}}
func With{{{classname}}}{{{name}}}(val {{#isModel}}*{{/isModel}}{{{dataType}}}) {{{classname}}}Option {
	return func(f *{{{classname}}}) {
		f.{{{name}}} = val
	}
}

{{/optionalVars}}
// New{{classname}} instantiates a new {{classname}} object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func New{{classname}}({{#requiredVars}}{{nameInCamelCase}} {{#isModel}}*{{/isModel}}{{dataType}}{{^-last}}, {{/-last}}{{/requiredVars}}{{#hasOptional}}{{#requiredVars.0}}, {{/requiredVars.0}}opts ...{{{classname}}}Option{{/hasOptional}}) *{{classname}} {
	this := &{{classname}}{}
{{#allVars}}
{{#required}}
	this.{{name}} = {{nameInCamelCase}}
{{/required}}
{{^required}}
{{/required}}
{{/allVars}}
{{#hasOptional}}
for _, opt := range opts {
  opt(this)
}
{{/hasOptional}}
	return this
}

// New{{classname}}WithDefaults instantiates a new {{classname}} object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func New{{classname}}WithDefaults() *{{classname}} {
	this := &{{classname}}{}
{{#vars}}
{{#defaultValue}}
{{^vendorExtensions.x-golang-is-container}}
{{^isReadOnly}}
{{#isNullable}}
{{!we use datatypeWithEnum here, since it will represent the non-nullable name of the datatype, e.g. int64 for NullableInt64}}
	var {{nameInCamelCase}} {{{datatypeWithEnum}}} = {{{.}}}
	this.{{name}} = *New{{{dataType}}}(&{{nameInCamelCase}})
{{/isNullable}}
{{^isNullable}}
	var {{nameInCamelCase}} {{{dataType}}} = {{{.}}}
	this.{{name}} = {{nameInCamelCase}}
{{/isNullable}}
{{/isReadOnly}}
{{/vendorExtensions.x-golang-is-container}}
{{/defaultValue}}
{{/vars}}
	return this
}

{{#isAdditionalPropertiesTrue}}
func (o {{classname}}) MarshalJSON() ([]byte, error) {
	type Alias {{classname}} // Create an alias to avoid infinite loop in MarshalJSON
	alias := Alias(o)

	if len(o.AdditionalProperties) == 0 {
		return json.Marshal(alias)
	}

	objMap := make(map[string]interface{})
	data, err := json.Marshal(alias)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal(data, &objMap)
	if err != nil {
		return nil, err
	}

	// Merge with AdditionalProperties
	for k, v := range o.AdditionalProperties {
		objMap[k] = v
	}

	return json.Marshal(objMap)
}

func (o *{{classname}}) UnmarshalJSON(bytes []byte) error {
	type Alias {{classname}} // Create an alias to avoid infinite loop in UnmarshalJSON
	var alias Alias
	if err := json.Unmarshal(bytes, &alias); err != nil {
		return err
	}

	*o = {{classname}}(alias) // Convert alias to DictionaryEntry

	var objMap map[string]interface{}
	err := json.Unmarshal(bytes, &objMap)
	if err != nil {
		return err
	}

	// List of struct fields. Use this to check if a key in objMap is an additional property
	structFields := []string{ {{#vars}}"{{{name}}}"{{^-last}}, {{/-last}}{{/vars}} }
	stringInSlice := func(str string, list []string) bool {
		for _, v := range list {
			if v == str {
				return true
			}
		}
		return false
	}

	// Fill AdditionalProperties
	o.AdditionalProperties = make(map[string]interface{})
	for k, v := range objMap {
		if !stringInSlice(k, structFields) {
			o.AdditionalProperties[k] = v
		}
	}
	return nil
}
{{/isAdditionalPropertiesTrue}}
{{#isArray}}
func (o *{{{classname}}}) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

{{/isArray}}
{{>nullable_model}}
