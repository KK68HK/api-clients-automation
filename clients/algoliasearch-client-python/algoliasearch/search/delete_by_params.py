# coding: utf-8

"""
    Search API

    Use the Search REST API  to manage your data (indices and records), implement search, and improve relevance (with Rules, synonyms, and language dictionaries).  Although Algolia provides a REST API, you should use the official open source API [clients, libraries, and tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) instead. There's no [SLA](https://www.algolia.com/policies/sla/) if you use the REST API directly.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from algoliasearch.models.around_radius import AroundRadius
from algoliasearch.models.facet_filters import FacetFilters
from algoliasearch.models.numeric_filters import NumericFilters
from algoliasearch.models.tag_filters import TagFilters


class DeleteByParams(BaseModel):
    """
    DeleteByParams
    """

    facet_filters: Optional[FacetFilters] = Field(None, alias="facetFilters")
    filters: Optional[StrictStr] = Field(
        "",
        description="[Filter](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/) the query with numeric, facet, or tag filters. ",
    )
    numeric_filters: Optional[NumericFilters] = Field(None, alias="numericFilters")
    tag_filters: Optional[TagFilters] = Field(None, alias="tagFilters")
    around_lat_lng: Optional[StrictStr] = Field(
        "",
        alias="aroundLatLng",
        description="Search for entries [around a central location](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filter-around-a-central-point), enabling a geographical search within a circular area.",
    )
    around_radius: Optional[AroundRadius] = Field(None, alias="aroundRadius")
    inside_bounding_box: Optional[
        conlist(conlist(Union[StrictFloat, StrictInt]))
    ] = Field(
        None,
        alias="insideBoundingBox",
        description="Search inside a [rectangular area](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas) (in geographical coordinates).",
    )
    inside_polygon: Optional[conlist(conlist(Union[StrictFloat, StrictInt]))] = Field(
        None,
        alias="insidePolygon",
        description="Search inside a [polygon](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas) (in geographical coordinates).",
    )
    __properties = [
        "facetFilters",
        "filters",
        "numericFilters",
        "tagFilters",
        "aroundLatLng",
        "aroundRadius",
        "insideBoundingBox",
        "insidePolygon",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DeleteByParams:
        """Create an instance of DeleteByParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of facet_filters
        if self.facet_filters:
            _dict["facetFilters"] = self.facet_filters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of numeric_filters
        if self.numeric_filters:
            _dict["numericFilters"] = self.numeric_filters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tag_filters
        if self.tag_filters:
            _dict["tagFilters"] = self.tag_filters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of around_radius
        if self.around_radius:
            _dict["aroundRadius"] = self.around_radius.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DeleteByParams:
        """Create an instance of DeleteByParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DeleteByParams.parse_obj(obj)

        _obj = DeleteByParams.parse_obj(
            {
                "facet_filters": FacetFilters.from_dict(obj.get("facetFilters"))
                if obj.get("facetFilters") is not None
                else None,
                "filters": obj.get("filters") if obj.get("filters") is not None else "",
                "numeric_filters": NumericFilters.from_dict(obj.get("numericFilters"))
                if obj.get("numericFilters") is not None
                else None,
                "tag_filters": TagFilters.from_dict(obj.get("tagFilters"))
                if obj.get("tagFilters") is not None
                else None,
                "around_lat_lng": obj.get("aroundLatLng")
                if obj.get("aroundLatLng") is not None
                else "",
                "around_radius": AroundRadius.from_dict(obj.get("aroundRadius"))
                if obj.get("aroundRadius") is not None
                else None,
                "inside_bounding_box": obj.get("insideBoundingBox"),
                "inside_polygon": obj.get("insidePolygon"),
            }
        )
        return _obj
