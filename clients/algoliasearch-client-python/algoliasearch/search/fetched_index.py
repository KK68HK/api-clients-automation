# coding: utf-8

"""
    Search API

    Use the Search REST API  to manage your data (indices and records), implement search, and improve relevance (with Rules, synonyms, and language dictionaries).  Although Algolia provides a REST API, you should use the official open source API [clients, libraries, and tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) instead. There's no [SLA](https://www.algolia.com/policies/sla/) if you use the REST API directly.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist


class FetchedIndex(BaseModel):
    """
    FetchedIndex
    """

    name: StrictStr = Field(..., description="Index name.")
    created_at: StrictStr = Field(
        ...,
        alias="createdAt",
        description="Index creation date. An empty string means that the index has no records.",
    )
    updated_at: StrictStr = Field(
        ...,
        alias="updatedAt",
        description="Timestamp of the last update in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.",
    )
    entries: StrictInt = Field(
        ..., description="Number of records contained in the index."
    )
    data_size: StrictInt = Field(
        ...,
        alias="dataSize",
        description="Number of bytes of the index in minified format.",
    )
    file_size: StrictInt = Field(
        ..., alias="fileSize", description="Number of bytes of the index binary file."
    )
    last_build_time_s: StrictInt = Field(
        ..., alias="lastBuildTimeS", description="Last build time."
    )
    number_of_pending_tasks: StrictInt = Field(
        ...,
        alias="numberOfPendingTasks",
        description="Number of pending indexing operations. This value is deprecated and should not be used.",
    )
    pending_task: StrictBool = Field(
        ...,
        alias="pendingTask",
        description="A boolean which says whether the index has pending tasks. This value is deprecated and should not be used.",
    )
    primary: Optional[StrictStr] = Field(
        None,
        description="Only present if the index is a replica. Contains the name of the related primary index.",
    )
    replicas: Optional[conlist(StrictStr)] = Field(
        None,
        description="Only present if the index is a primary index with replicas. Contains the names of all linked replicas.",
    )
    __properties = [
        "name",
        "createdAt",
        "updatedAt",
        "entries",
        "dataSize",
        "fileSize",
        "lastBuildTimeS",
        "numberOfPendingTasks",
        "pendingTask",
        "primary",
        "replicas",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FetchedIndex:
        """Create an instance of FetchedIndex from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FetchedIndex:
        """Create an instance of FetchedIndex from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FetchedIndex.parse_obj(obj)

        _obj = FetchedIndex.parse_obj(
            {
                "name": obj.get("name"),
                "created_at": obj.get("createdAt"),
                "updated_at": obj.get("updatedAt"),
                "entries": obj.get("entries"),
                "data_size": obj.get("dataSize"),
                "file_size": obj.get("fileSize"),
                "last_build_time_s": obj.get("lastBuildTimeS"),
                "number_of_pending_tasks": obj.get("numberOfPendingTasks")
                if obj.get("numberOfPendingTasks") is not None
                else 0,
                "pending_task": obj.get("pendingTask")
                if obj.get("pendingTask") is not None
                else False,
                "primary": obj.get("primary"),
                "replicas": obj.get("replicas"),
            }
        )
        return _obj
