# coding: utf-8

"""
    Search API

    Use the Search REST API  to manage your data (indices and records), implement search, and improve relevance (with Rules, synonyms, and language dictionaries).  Although Algolia provides a REST API, you should use the official open source API [clients, libraries, and tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) instead. There's no [SLA](https://www.algolia.com/policies/sla/) if you use the REST API directly.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from algoliasearch.models.log_query import LogQuery


class Log(BaseModel):
    """
    Log
    """

    timestamp: StrictStr = Field(
        ...,
        description="Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.",
    )
    method: StrictStr = Field(..., description="HTTP method of the performed request.")
    answer_code: StrictStr = Field(..., description="HTTP response code.")
    query_body: StrictStr = Field(
        ..., description="Request body. Truncated after 1,000 characters."
    )
    answer: StrictStr = Field(
        ..., description="Answer body. Truncated after 1,000 characters."
    )
    url: StrictStr = Field(..., description="Request URL.")
    ip: StrictStr = Field(
        ..., description="IP address of the client that performed the request."
    )
    query_headers: StrictStr = Field(
        ..., description="Request headers (API key is obfuscated)."
    )
    sha1: StrictStr = Field(..., description="SHA1 signature of the log entry.")
    nb_api_calls: StrictStr = Field(..., description="Number of API calls.")
    processing_time_ms: StrictStr = Field(
        ..., description="Processing time for the query. Doesn't include network time."
    )
    index: Optional[StrictStr] = Field(None, description="Index targeted by the query.")
    query_params: Optional[StrictStr] = Field(
        None, description="Query parameters sent with the request."
    )
    query_nb_hits: Optional[StrictStr] = Field(
        None, description="Number of hits returned for the query."
    )
    inner_queries: Optional[conlist(LogQuery)] = Field(
        None, description="Performed queries for the given request."
    )
    __properties = [
        "timestamp",
        "method",
        "answer_code",
        "query_body",
        "answer",
        "url",
        "ip",
        "query_headers",
        "sha1",
        "nb_api_calls",
        "processing_time_ms",
        "index",
        "query_params",
        "query_nb_hits",
        "inner_queries",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Log:
        """Create an instance of Log from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in inner_queries (list)
        _items = []
        if self.inner_queries:
            for _item in self.inner_queries:
                if _item:
                    _items.append(_item.to_dict())
            _dict["inner_queries"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Log:
        """Create an instance of Log from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Log.parse_obj(obj)

        _obj = Log.parse_obj(
            {
                "timestamp": obj.get("timestamp"),
                "method": obj.get("method"),
                "answer_code": obj.get("answer_code"),
                "query_body": obj.get("query_body"),
                "answer": obj.get("answer"),
                "url": obj.get("url"),
                "ip": obj.get("ip"),
                "query_headers": obj.get("query_headers"),
                "sha1": obj.get("sha1"),
                "nb_api_calls": obj.get("nb_api_calls"),
                "processing_time_ms": obj.get("processing_time_ms"),
                "index": obj.get("index"),
                "query_params": obj.get("query_params"),
                "query_nb_hits": obj.get("query_nb_hits"),
                "inner_queries": [
                    LogQuery.from_dict(_item) for _item in obj.get("inner_queries")
                ]
                if obj.get("inner_queries") is not None
                else None,
            }
        )
        return _obj
