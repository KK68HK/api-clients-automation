# coding: utf-8

"""
    Search API

    Use the Search REST API  to manage your data (indices and records), implement search, and improve relevance (with Rules, synonyms, and language dictionaries).  Although Algolia provides a REST API, you should use the official open source API [clients, libraries, and tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) instead. There's no [SLA](https://www.algolia.com/policies/sla/) if you use the REST API directly.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from algoliasearch.models.synonym_type import SynonymType

class SynonymHit(BaseModel):
    """
    Synonym object.  # noqa: E501
    """
    object_id: StrictStr = Field(..., alias="objectID", description="Unique identifier of a synonym object.")
    type: SynonymType = Field(...)
    synonyms: Optional[conlist(StrictStr)] = Field(None, description="Words or phrases considered equivalent.")
    input: Optional[StrictStr] = Field(None, description="Word or phrase to appear in query strings (for [`onewaysynonym`s](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/one-way-synonyms/)).")
    word: Optional[StrictStr] = Field(None, description="Word or phrase to appear in query strings (for [`altcorrection1` and `altcorrection2`](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/synonyms-alternative-corrections/)).")
    corrections: Optional[conlist(StrictStr)] = Field(None, description="Words to be matched in records.")
    placeholder: Optional[StrictStr] = Field(None, description="[Placeholder token](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/synonyms-placeholders/) to be put inside records. ")
    replacements: Optional[conlist(StrictStr)] = Field(None, description="Query words that will match the [placeholder token](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/synonyms-placeholders/).")
    __properties = ["objectID", "type", "synonyms", "input", "word", "corrections", "placeholder", "replacements"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SynonymHit:
        """Create an instance of SynonymHit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SynonymHit:
        """Create an instance of SynonymHit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SynonymHit.parse_obj(obj)

        _obj = SynonymHit.parse_obj({
            "object_id": obj.get("objectID"),
            "type": obj.get("type"),
            "synonyms": obj.get("synonyms"),
            "input": obj.get("input"),
            "word": obj.get("word"),
            "corrections": obj.get("corrections"),
            "placeholder": obj.get("placeholder"),
            "replacements": obj.get("replacements")
        })
        return _obj


