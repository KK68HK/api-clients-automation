# coding: utf-8

"""
    Search API

    Use the Search REST API  to manage your data (indices and records), implement search, and improve relevance (with Rules, synonyms, and language dictionaries).  Although Algolia provides a REST API, you should use the official open source API [clients, libraries, and tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) instead. There's no [SLA](https://www.algolia.com/policies/sla/) if you use the REST API directly.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from algoliasearch.models.highlight_result import HighlightResult
from algoliasearch.models.ranking_info import RankingInfo
from algoliasearch.models.snippet_result import SnippetResult


class Hit(BaseModel):
    """
    A single hit.  # noqa: E501
    """

    object_id: StrictStr = Field(
        ..., alias="objectID", description="Unique object identifier."
    )
    highlight_result: Optional[Dict[str, HighlightResult]] = Field(
        None,
        alias="_highlightResult",
        description="Show highlighted section and words matched on a query.",
    )
    snippet_result: Optional[Dict[str, SnippetResult]] = Field(
        None,
        alias="_snippetResult",
        description="Snippeted attributes show parts of the matched attributes. Only returned when attributesToSnippet is non-empty.",
    )
    ranking_info: Optional[RankingInfo] = Field(None, alias="_rankingInfo")
    distinct_seq_id: Optional[StrictInt] = Field(None, alias="_distinctSeqID")
    additional_properties: Dict[str, Any] = {}
    __properties = [
        "objectID",
        "_highlightResult",
        "_snippetResult",
        "_rankingInfo",
        "_distinctSeqID",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Hit:
        """Create an instance of Hit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True, exclude={"additional_properties"}, exclude_none=True
        )
        # override the default output from pydantic by calling `to_dict()` of each value in highlight_result (dict)
        _field_dict = {}
        if self.highlight_result:
            for _key in self.highlight_result:
                if self.highlight_result[_key]:
                    _field_dict[_key] = self.highlight_result[_key].to_dict()
            _dict["_highlightResult"] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in snippet_result (dict)
        _field_dict = {}
        if self.snippet_result:
            for _key in self.snippet_result:
                if self.snippet_result[_key]:
                    _field_dict[_key] = self.snippet_result[_key].to_dict()
            _dict["_snippetResult"] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of ranking_info
        if self.ranking_info:
            _dict["_rankingInfo"] = self.ranking_info.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Hit:
        """Create an instance of Hit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Hit.parse_obj(obj)

        _obj = Hit.parse_obj(
            {
                "object_id": obj.get("objectID"),
                "highlight_result": dict(
                    (_k, HighlightResult.from_dict(_v))
                    for _k, _v in obj.get("_highlightResult").items()
                )
                if obj.get("_highlightResult") is not None
                else None,
                "snippet_result": dict(
                    (_k, SnippetResult.from_dict(_v))
                    for _k, _v in obj.get("_snippetResult").items()
                )
                if obj.get("_snippetResult") is not None
                else None,
                "ranking_info": RankingInfo.from_dict(obj.get("_rankingInfo"))
                if obj.get("_rankingInfo") is not None
                else None,
                "distinct_seq_id": obj.get("_distinctSeqID"),
            }
        )
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
