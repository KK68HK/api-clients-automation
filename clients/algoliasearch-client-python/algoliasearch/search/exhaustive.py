# coding: utf-8

"""
    Search API

    Use the Search REST API  to manage your data (indices and records), implement search, and improve relevance (with Rules, synonyms, and language dictionaries).  Although Algolia provides a REST API, you should use the official open source API [clients, libraries, and tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) instead. There's no [SLA](https://www.algolia.com/policies/sla/) if you use the REST API directly.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool

class Exhaustive(BaseModel):
    """
    Whether certain properties of the search response are calculated exhaustive (exact) or approximated.  # noqa: E501
    """
    facets_count: Optional[StrictBool] = Field(None, alias="facetsCount", description="Whether the facet count is exhaustive (`true`) or approximate (`false`). See the [related discussion](https://support.algolia.com/hc/en-us/articles/4406975248145-Why-are-my-facet-and-hit-counts-not-accurate-).")
    facet_values: Optional[StrictBool] = Field(None, alias="facetValues", description="The value is `false` if not all facet values are retrieved.")
    nb_hits: Optional[StrictBool] = Field(None, alias="nbHits", description="Whether the `nbHits` is exhaustive (`true`) or approximate (`false`). When the query takes more than 50ms to be processed, the engine makes an approximation. This can happen when using complex filters on millions of records, when typo-tolerance was not exhaustive, or when enough hits have been retrieved (for example, after the engine finds 10,000 exact matches). `nbHits` is reported as non-exhaustive whenever an approximation is made, even if the approximation didnâ€™t, in the end, impact the exhaustivity of the query.")
    rules_match: Optional[StrictBool] = Field(None, alias="rulesMatch", description="Rules matching exhaustivity. The value is `false` if rules were enable for this query, and could not be fully processed due a timeout. This is generally caused by the number of alternatives (such as typos) which is too large.")
    typo: Optional[StrictBool] = Field(None, description="Whether the typo search was exhaustive (`true`) or approximate (`false`). An approximation is done when the typo search query part takes more than 10% of the query budget (ie. 5ms by default) to be processed (this can happen when a lot of typo alternatives exist for the query). This field will not be included when typo-tolerance is entirely disabled.")
    __properties = ["facetsCount", "facetValues", "nbHits", "rulesMatch", "typo"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Exhaustive:
        """Create an instance of Exhaustive from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Exhaustive:
        """Create an instance of Exhaustive from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Exhaustive.parse_obj(obj)

        _obj = Exhaustive.parse_obj({
            "facets_count": obj.get("facetsCount"),
            "facet_values": obj.get("facetValues"),
            "nb_hits": obj.get("nbHits"),
            "rules_match": obj.get("rulesMatch"),
            "typo": obj.get("typo")
        })
        return _obj


