# coding: utf-8

"""
    Search API

    Use the Search REST API  to manage your data (indices and records), implement search, and improve relevance (with Rules, synonyms, and language dictionaries).  Although Algolia provides a REST API, you should use the official open source API [clients, libraries, and tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) instead. There's no [SLA](https://www.algolia.com/policies/sla/) if you use the REST API directly.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from algoliasearch.models.condition import Condition
from algoliasearch.models.consequence import Consequence
from algoliasearch.models.time_range import TimeRange

class Rule(BaseModel):
    """
    Rule object.  # noqa: E501
    """
    object_id: StrictStr = Field(..., alias="objectID", description="Unique identifier for a rule object.")
    conditions: Optional[conlist(Condition)] = Field(None, description="[Conditions](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/#conditions) required to activate a rule. You can use up to 25 conditions per rule. ")
    consequence: Optional[Consequence] = None
    description: Optional[StrictStr] = Field(None, description="Description of the rule's purpose. This can be helpful for display in the Algolia dashboard.")
    enabled: Optional[StrictBool] = Field(True, description="Indicates whether to enable the rule. If it isn't enabled, it isn't applied at query time.")
    validity: Optional[conlist(TimeRange)] = Field(None, description="If you specify a validity period, the rule _only_ applies only during that period. If specified, the array must not be empty.")
    __properties = ["objectID", "conditions", "consequence", "description", "enabled", "validity"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Rule:
        """Create an instance of Rule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item in self.conditions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['conditions'] = _items
        # override the default output from pydantic by calling `to_dict()` of consequence
        if self.consequence:
            _dict['consequence'] = self.consequence.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in validity (list)
        _items = []
        if self.validity:
            for _item in self.validity:
                if _item:
                    _items.append(_item.to_dict())
            _dict['validity'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Rule:
        """Create an instance of Rule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Rule.parse_obj(obj)

        _obj = Rule.parse_obj({
            "object_id": obj.get("objectID"),
            "conditions": [Condition.from_dict(_item) for _item in obj.get("conditions")] if obj.get("conditions") is not None else None,
            "consequence": Consequence.from_dict(obj.get("consequence")) if obj.get("consequence") is not None else None,
            "description": obj.get("description"),
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else True,
            "validity": [TimeRange.from_dict(_item) for _item in obj.get("validity")] if obj.get("validity") is not None else None
        })
        return _obj


