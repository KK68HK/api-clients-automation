# coding: utf-8

"""
    Search API

    Use the Search REST API  to manage your data (indices and records), implement search, and improve relevance (with Rules, synonyms, and language dictionaries).  Although Algolia provides a REST API, you should use the official open source API [clients, libraries, and tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) instead. There's no [SLA](https://www.algolia.com/policies/sla/) if you use the REST API directly.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conint

class SearchDictionaryEntriesParams(BaseModel):
    """
    `searchDictionaryEntries` parameters.   # noqa: E501
    """
    query: StrictStr = Field(..., description="Text to search for in an index.")
    page: Optional[StrictInt] = Field(0, description="Page to retrieve (the first page is `0`, not `1`).")
    hits_per_page: Optional[conint(strict=True, le=1000, ge=1)] = Field(20, alias="hitsPerPage", description="Number of hits per page.")
    language: Optional[StrictStr] = Field(None, description="[Supported language ISO code](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/). ")
    __properties = ["query", "page", "hitsPerPage", "language"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SearchDictionaryEntriesParams:
        """Create an instance of SearchDictionaryEntriesParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SearchDictionaryEntriesParams:
        """Create an instance of SearchDictionaryEntriesParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SearchDictionaryEntriesParams.parse_obj(obj)

        _obj = SearchDictionaryEntriesParams.parse_obj({
            "query": obj.get("query") if obj.get("query") is not None else '',
            "page": obj.get("page") if obj.get("page") is not None else 0,
            "hits_per_page": obj.get("hitsPerPage") if obj.get("hitsPerPage") is not None else 20,
            "language": obj.get("language")
        })
        return _obj


