# coding: utf-8

"""
    Search API

    Use the Search REST API  to manage your data (indices and records), implement search, and improve relevance (with Rules, synonyms, and language dictionaries).  Although Algolia provides a REST API, you should use the official open source API [clients, libraries, and tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) instead. There's no [SLA](https://www.algolia.com/policies/sla/) if you use the REST API directly.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class SemanticSearch(BaseModel):
    """
    Settings for the semantic search part of NeuralSearch. Only used when `mode` is _neuralSearch_.   # noqa: E501
    """
    event_sources: Optional[conlist(StrictStr)] = Field(None, alias="eventSources", description="Indices from which to collect click and conversion events. If null, the current index and replica group will be used as the event source.")
    __properties = ["eventSources"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SemanticSearch:
        """Create an instance of SemanticSearch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if event_sources (nullable) is None
        # and __fields_set__ contains the field
        if self.event_sources is None and "event_sources" in self.__fields_set__:
            _dict['eventSources'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SemanticSearch:
        """Create an instance of SemanticSearch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SemanticSearch.parse_obj(obj)

        _obj = SemanticSearch.parse_obj({
            "event_sources": obj.get("eventSources")
        })
        return _obj


