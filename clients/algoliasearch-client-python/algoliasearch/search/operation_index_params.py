# coding: utf-8

"""
    Search API

    Use the Search REST API  to manage your data (indices and records), implement search, and improve relevance (with Rules, synonyms, and language dictionaries).  Although Algolia provides a REST API, you should use the official open source API [clients, libraries, and tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) instead. There's no [SLA](https://www.algolia.com/policies/sla/) if you use the REST API directly.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from algoliasearch.models.operation_type import OperationType
from algoliasearch.models.scope_type import ScopeType

class OperationIndexParams(BaseModel):
    """
    OperationIndexParams
    """
    operation: OperationType = Field(...)
    destination: StrictStr = Field(..., description="Algolia index name.")
    scope: Optional[conlist(ScopeType)] = Field(None, description="**This only applies to the _copy_ operation.**  If you omit `scope`, the copy command copies all records, settings, synonyms, and rules.  If you specify `scope`, only the specified scopes are copied.")
    __properties = ["operation", "destination", "scope"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OperationIndexParams:
        """Create an instance of OperationIndexParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OperationIndexParams:
        """Create an instance of OperationIndexParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OperationIndexParams.parse_obj(obj)

        _obj = OperationIndexParams.parse_obj({
            "operation": obj.get("operation"),
            "destination": obj.get("destination"),
            "scope": obj.get("scope")
        })
        return _obj


