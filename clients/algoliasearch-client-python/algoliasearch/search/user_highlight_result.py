# coding: utf-8

"""
    Search API

    Use the Search REST API  to manage your data (indices and records), implement search, and improve relevance (with Rules, synonyms, and language dictionaries).  Although Algolia provides a REST API, you should use the official open source API [clients, libraries, and tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) instead. There's no [SLA](https://www.algolia.com/policies/sla/) if you use the REST API directly.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict
from pydantic import BaseModel, Field
from algoliasearch.models.highlight_result import HighlightResult


class UserHighlightResult(BaseModel):
    """
    UserHighlightResult
    """

    user_id: Dict[str, HighlightResult] = Field(
        ...,
        alias="userID",
        description="Show highlighted section and words matched on a query.",
    )
    cluster_name: Dict[str, HighlightResult] = Field(
        ...,
        alias="clusterName",
        description="Show highlighted section and words matched on a query.",
    )
    __properties = ["userID", "clusterName"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserHighlightResult:
        """Create an instance of UserHighlightResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in user_id (dict)
        _field_dict = {}
        if self.user_id:
            for _key in self.user_id:
                if self.user_id[_key]:
                    _field_dict[_key] = self.user_id[_key].to_dict()
            _dict["userID"] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in cluster_name (dict)
        _field_dict = {}
        if self.cluster_name:
            for _key in self.cluster_name:
                if self.cluster_name[_key]:
                    _field_dict[_key] = self.cluster_name[_key].to_dict()
            _dict["clusterName"] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserHighlightResult:
        """Create an instance of UserHighlightResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserHighlightResult.parse_obj(obj)

        _obj = UserHighlightResult.parse_obj(
            {
                "user_id": dict(
                    (_k, HighlightResult.from_dict(_v))
                    for _k, _v in obj.get("userID").items()
                )
                if obj.get("userID") is not None
                else None,
                "cluster_name": dict(
                    (_k, HighlightResult.from_dict(_v))
                    for _k, _v in obj.get("clusterName").items()
                )
                if obj.get("clusterName") is not None
                else None,
            }
        )
        return _obj
