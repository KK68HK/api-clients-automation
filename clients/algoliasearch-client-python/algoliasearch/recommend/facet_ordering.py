# coding: utf-8

"""
    Recommend API

    The Recommend API lets you generate recommendations with several AI models.  > **Note**: You should use Algolia's [libraries and tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) to interact with the Recommend API. Using the HTTP endpoints directly is not covered by the [SLA](https://www.algolia.com/policies/sla/).

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field
from algoliasearch.models.facets import Facets
from algoliasearch.models.value import Value


class FacetOrdering(BaseModel):
    """
    Defines the ordering of facets (widgets).  # noqa: E501
    """

    facets: Optional[Facets] = None
    values: Optional[Dict[str, Value]] = Field(
        None, description="Ordering of facet values within an individual facet."
    )
    __properties = ["facets", "values"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FacetOrdering:
        """Create an instance of FacetOrdering from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of facets
        if self.facets:
            _dict["facets"] = self.facets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in values (dict)
        _field_dict = {}
        if self.values:
            for _key in self.values:
                if self.values[_key]:
                    _field_dict[_key] = self.values[_key].to_dict()
            _dict["values"] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FacetOrdering:
        """Create an instance of FacetOrdering from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FacetOrdering.parse_obj(obj)

        _obj = FacetOrdering.parse_obj(
            {
                "facets": Facets.from_dict(obj.get("facets"))
                if obj.get("facets") is not None
                else None,
                "values": dict(
                    (_k, Value.from_dict(_v)) for _k, _v in obj.get("values").items()
                )
                if obj.get("values") is not None
                else None,
            }
        )
        return _obj
