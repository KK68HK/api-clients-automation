# coding: utf-8

"""
    Recommend API

    The Recommend API lets you generate recommendations with several AI models.  > **Note**: You should use Algolia's [libraries and tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) to interact with the Recommend API. Using the HTTP endpoints directly is not covered by the [SLA](https://www.algolia.com/policies/sla/).

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictInt, StrictStr

from typing import Any, Dict, Optional

from algoliasearch.models.deleted_at_response import DeletedAtResponse
from algoliasearch.models.get_recommend_task_response import GetRecommendTaskResponse
from algoliasearch.models.get_recommendations_params import GetRecommendationsParams
from algoliasearch.models.get_recommendations_response import GetRecommendationsResponse
from algoliasearch.models.recommend_models import RecommendModels
from algoliasearch.models.rule_response import RuleResponse
from algoliasearch.models.search_recommend_rules_params import SearchRecommendRulesParams
from algoliasearch.models.search_recommend_rules_response import SearchRecommendRulesResponse

from algoliasearch.api_client import ApiClient
from algoliasearch.api_response import ApiResponse
from algoliasearch.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class RecommendClient:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def call_del(self, path : Annotated[StrictStr, Field(..., description="Path of the endpoint, anything after \"/1\" must be specified.")], parameters : Annotated[Optional[Dict[str, Any]], Field(description="Query parameters to apply to the current query.")] = None, **kwargs) -> object:  # noqa: E501
        """Send requests to the Algolia REST API.  # noqa: E501

        This method allow you to send requests to the Algolia REST API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.call_del(path, parameters, async_req=True)
        >>> result = thread.get()

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the call_del_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.call_del_with_http_info(path, parameters, **kwargs)  # noqa: E501

    @validate_arguments
    def call_del_with_http_info(self, path : Annotated[StrictStr, Field(..., description="Path of the endpoint, anything after \"/1\" must be specified.")], parameters : Annotated[Optional[Dict[str, Any]], Field(description="Query parameters to apply to the current query.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Send requests to the Algolia REST API.  # noqa: E501

        This method allow you to send requests to the Algolia REST API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.call_del_with_http_info(path, parameters, async_req=True)
        >>> result = thread.get()

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'path',
            'parameters'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method call_del" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['path']:
            _path_params['path'] = _params['path']


        # process the query parameters
        _query_params = []
        if _params.get('parameters') is not None:  # noqa: E501
            _query_params.append(('parameters', _params['parameters']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'appId']  # noqa: E501

        _response_types_map = {
            '200': "object",
            '400': "ErrorBase",
            '402': "ErrorBase",
            '403': "ErrorBase",
            '404': "ErrorBase",
        }

        return self.api_client.call_api(
            '/1{path}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_recommend_rule(self, index_name : Annotated[StrictStr, Field(..., description="Index on which to perform the request.")], model : Annotated[RecommendModels, Field(..., description="[Recommend models](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models). ")], object_id : Annotated[StrictStr, Field(..., description="Unique record (object) identifier.")], **kwargs) -> DeletedAtResponse:  # noqa: E501
        """Delete a Recommend rule.  # noqa: E501

        Delete a [Recommend rule](https://www.algolia.com/doc/guides/algolia-recommend/how-to/rules/).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_recommend_rule(index_name, model, object_id, async_req=True)
        >>> result = thread.get()

        :param index_name: Index on which to perform the request. (required)
        :type index_name: str
        :param model: [Recommend models](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).  (required)
        :type model: RecommendModels
        :param object_id: Unique record (object) identifier. (required)
        :type object_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DeletedAtResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_recommend_rule_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_recommend_rule_with_http_info(index_name, model, object_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_recommend_rule_with_http_info(self, index_name : Annotated[StrictStr, Field(..., description="Index on which to perform the request.")], model : Annotated[RecommendModels, Field(..., description="[Recommend models](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models). ")], object_id : Annotated[StrictStr, Field(..., description="Unique record (object) identifier.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Delete a Recommend rule.  # noqa: E501

        Delete a [Recommend rule](https://www.algolia.com/doc/guides/algolia-recommend/how-to/rules/).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_recommend_rule_with_http_info(index_name, model, object_id, async_req=True)
        >>> result = thread.get()

        :param index_name: Index on which to perform the request. (required)
        :type index_name: str
        :param model: [Recommend models](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).  (required)
        :type model: RecommendModels
        :param object_id: Unique record (object) identifier. (required)
        :type object_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DeletedAtResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'index_name',
            'model',
            'object_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_recommend_rule" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['index_name']:
            _path_params['indexName'] = _params['index_name']

        if _params['model']:
            _path_params['model'] = _params['model']

        if _params['object_id']:
            _path_params['objectID'] = _params['object_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'appId']  # noqa: E501

        _response_types_map = {
            '200': "DeletedAtResponse",
            '400': "ErrorBase",
            '402': "ErrorBase",
            '403': "ErrorBase",
            '404': "ErrorBase",
        }

        return self.api_client.call_api(
            '/1/indexes/{indexName}/{model}/recommend/rules/{objectID}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get(self, path : Annotated[StrictStr, Field(..., description="Path of the endpoint, anything after \"/1\" must be specified.")], parameters : Annotated[Optional[Dict[str, Any]], Field(description="Query parameters to apply to the current query.")] = None, **kwargs) -> object:  # noqa: E501
        """Send requests to the Algolia REST API.  # noqa: E501

        This method allow you to send requests to the Algolia REST API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get(path, parameters, async_req=True)
        >>> result = thread.get()

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_with_http_info(path, parameters, **kwargs)  # noqa: E501

    @validate_arguments
    def get_with_http_info(self, path : Annotated[StrictStr, Field(..., description="Path of the endpoint, anything after \"/1\" must be specified.")], parameters : Annotated[Optional[Dict[str, Any]], Field(description="Query parameters to apply to the current query.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Send requests to the Algolia REST API.  # noqa: E501

        This method allow you to send requests to the Algolia REST API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_with_http_info(path, parameters, async_req=True)
        >>> result = thread.get()

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'path',
            'parameters'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['path']:
            _path_params['path'] = _params['path']


        # process the query parameters
        _query_params = []
        if _params.get('parameters') is not None:  # noqa: E501
            _query_params.append(('parameters', _params['parameters']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'appId']  # noqa: E501

        _response_types_map = {
            '200': "object",
            '400': "ErrorBase",
            '402': "ErrorBase",
            '403': "ErrorBase",
            '404': "ErrorBase",
        }

        return self.api_client.call_api(
            '/1{path}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_recommend_rule(self, index_name : Annotated[StrictStr, Field(..., description="Index on which to perform the request.")], model : Annotated[RecommendModels, Field(..., description="[Recommend models](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models). ")], object_id : Annotated[StrictStr, Field(..., description="Unique record (object) identifier.")], **kwargs) -> RuleResponse:  # noqa: E501
        """Get a Recommend rule.  # noqa: E501

        Return a [Recommend rule](https://www.algolia.com/doc/guides/algolia-recommend/how-to/rules/).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_recommend_rule(index_name, model, object_id, async_req=True)
        >>> result = thread.get()

        :param index_name: Index on which to perform the request. (required)
        :type index_name: str
        :param model: [Recommend models](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).  (required)
        :type model: RecommendModels
        :param object_id: Unique record (object) identifier. (required)
        :type object_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RuleResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_recommend_rule_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_recommend_rule_with_http_info(index_name, model, object_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_recommend_rule_with_http_info(self, index_name : Annotated[StrictStr, Field(..., description="Index on which to perform the request.")], model : Annotated[RecommendModels, Field(..., description="[Recommend models](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models). ")], object_id : Annotated[StrictStr, Field(..., description="Unique record (object) identifier.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get a Recommend rule.  # noqa: E501

        Return a [Recommend rule](https://www.algolia.com/doc/guides/algolia-recommend/how-to/rules/).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_recommend_rule_with_http_info(index_name, model, object_id, async_req=True)
        >>> result = thread.get()

        :param index_name: Index on which to perform the request. (required)
        :type index_name: str
        :param model: [Recommend models](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).  (required)
        :type model: RecommendModels
        :param object_id: Unique record (object) identifier. (required)
        :type object_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RuleResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'index_name',
            'model',
            'object_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_recommend_rule" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['index_name']:
            _path_params['indexName'] = _params['index_name']

        if _params['model']:
            _path_params['model'] = _params['model']

        if _params['object_id']:
            _path_params['objectID'] = _params['object_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'appId']  # noqa: E501

        _response_types_map = {
            '200': "RuleResponse",
            '400': "ErrorBase",
            '402': "ErrorBase",
            '403': "ErrorBase",
            '404': "ErrorBase",
        }

        return self.api_client.call_api(
            '/1/indexes/{indexName}/{model}/recommend/rules/{objectID}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_recommend_status(self, index_name : Annotated[StrictStr, Field(..., description="Index on which to perform the request.")], model : Annotated[RecommendModels, Field(..., description="[Recommend models](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models). ")], task_id : Annotated[StrictInt, Field(..., description="Unique identifier of a task. Numeric value (up to 64bits).")], **kwargs) -> GetRecommendTaskResponse:  # noqa: E501
        """Get a Recommend task's status.  # noqa: E501

        Some operations, such as deleting a Recommend rule, will respond with a `taskID` value. Use this value here to check the status of that task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_recommend_status(index_name, model, task_id, async_req=True)
        >>> result = thread.get()

        :param index_name: Index on which to perform the request. (required)
        :type index_name: str
        :param model: [Recommend models](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).  (required)
        :type model: RecommendModels
        :param task_id: Unique identifier of a task. Numeric value (up to 64bits). (required)
        :type task_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetRecommendTaskResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_recommend_status_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_recommend_status_with_http_info(index_name, model, task_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_recommend_status_with_http_info(self, index_name : Annotated[StrictStr, Field(..., description="Index on which to perform the request.")], model : Annotated[RecommendModels, Field(..., description="[Recommend models](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models). ")], task_id : Annotated[StrictInt, Field(..., description="Unique identifier of a task. Numeric value (up to 64bits).")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get a Recommend task's status.  # noqa: E501

        Some operations, such as deleting a Recommend rule, will respond with a `taskID` value. Use this value here to check the status of that task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_recommend_status_with_http_info(index_name, model, task_id, async_req=True)
        >>> result = thread.get()

        :param index_name: Index on which to perform the request. (required)
        :type index_name: str
        :param model: [Recommend models](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).  (required)
        :type model: RecommendModels
        :param task_id: Unique identifier of a task. Numeric value (up to 64bits). (required)
        :type task_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetRecommendTaskResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'index_name',
            'model',
            'task_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_recommend_status" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['index_name']:
            _path_params['indexName'] = _params['index_name']

        if _params['model']:
            _path_params['model'] = _params['model']

        if _params['task_id']:
            _path_params['taskID'] = _params['task_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'appId']  # noqa: E501

        _response_types_map = {
            '200': "GetRecommendTaskResponse",
            '400': "ErrorBase",
            '402': "ErrorBase",
            '403': "ErrorBase",
            '404': "ErrorBase",
        }

        return self.api_client.call_api(
            '/1/indexes/{indexName}/{model}/task/{taskID}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_recommendations(self, get_recommendations_params : GetRecommendationsParams, **kwargs) -> GetRecommendationsResponse:  # noqa: E501
        """Get recommendations and trending items.  # noqa: E501

        Returns results from either recommendation or trending models:    - **Recommendations** are provided by the [Related Products](https://www.algolia.com/doc/guides/algolia-recommend/overview/#related-products-and-related-content) and [Frequently Bought Together](https://www.algolia.com/doc/guides/algolia-recommend/overview/#frequently-bought-together) models   - **Trending** models are [Trending Items and Trending Facet Values](https://www.algolia.com/doc/guides/algolia-recommend/overview/#trending-items-and-trending-facet-values).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_recommendations(get_recommendations_params, async_req=True)
        >>> result = thread.get()

        :param get_recommendations_params: (required)
        :type get_recommendations_params: GetRecommendationsParams
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetRecommendationsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_recommendations_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_recommendations_with_http_info(get_recommendations_params, **kwargs)  # noqa: E501

    @validate_arguments
    def get_recommendations_with_http_info(self, get_recommendations_params : GetRecommendationsParams, **kwargs) -> ApiResponse:  # noqa: E501
        """Get recommendations and trending items.  # noqa: E501

        Returns results from either recommendation or trending models:    - **Recommendations** are provided by the [Related Products](https://www.algolia.com/doc/guides/algolia-recommend/overview/#related-products-and-related-content) and [Frequently Bought Together](https://www.algolia.com/doc/guides/algolia-recommend/overview/#frequently-bought-together) models   - **Trending** models are [Trending Items and Trending Facet Values](https://www.algolia.com/doc/guides/algolia-recommend/overview/#trending-items-and-trending-facet-values).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_recommendations_with_http_info(get_recommendations_params, async_req=True)
        >>> result = thread.get()

        :param get_recommendations_params: (required)
        :type get_recommendations_params: GetRecommendationsParams
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetRecommendationsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'get_recommendations_params'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_recommendations" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['get_recommendations_params'] is not None:
            _body_params = _params['get_recommendations_params']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['apiKey', 'appId']  # noqa: E501

        _response_types_map = {
            '200': "GetRecommendationsResponse",
            '400': "ErrorBase",
            '402': "ErrorBase",
            '403': "ErrorBase",
            '404': "ErrorBase",
        }

        return self.api_client.call_api(
            '/1/indexes/*/recommendations', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def post(self, path : Annotated[StrictStr, Field(..., description="Path of the endpoint, anything after \"/1\" must be specified.")], parameters : Annotated[Optional[Dict[str, Any]], Field(description="Query parameters to apply to the current query.")] = None, body : Annotated[Optional[Dict[str, Any]], Field(description="Parameters to send with the custom request.")] = None, **kwargs) -> object:  # noqa: E501
        """Send requests to the Algolia REST API.  # noqa: E501

        This method allow you to send requests to the Algolia REST API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post(path, parameters, body, async_req=True)
        >>> result = thread.get()

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param body: Parameters to send with the custom request.
        :type body: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.post_with_http_info(path, parameters, body, **kwargs)  # noqa: E501

    @validate_arguments
    def post_with_http_info(self, path : Annotated[StrictStr, Field(..., description="Path of the endpoint, anything after \"/1\" must be specified.")], parameters : Annotated[Optional[Dict[str, Any]], Field(description="Query parameters to apply to the current query.")] = None, body : Annotated[Optional[Dict[str, Any]], Field(description="Parameters to send with the custom request.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Send requests to the Algolia REST API.  # noqa: E501

        This method allow you to send requests to the Algolia REST API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_with_http_info(path, parameters, body, async_req=True)
        >>> result = thread.get()

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param body: Parameters to send with the custom request.
        :type body: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'path',
            'parameters',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['path']:
            _path_params['path'] = _params['path']


        # process the query parameters
        _query_params = []
        if _params.get('parameters') is not None:  # noqa: E501
            _query_params.append(('parameters', _params['parameters']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['apiKey', 'appId']  # noqa: E501

        _response_types_map = {
            '200': "object",
            '400': "ErrorBase",
            '402': "ErrorBase",
            '403': "ErrorBase",
            '404': "ErrorBase",
        }

        return self.api_client.call_api(
            '/1{path}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def put(self, path : Annotated[StrictStr, Field(..., description="Path of the endpoint, anything after \"/1\" must be specified.")], parameters : Annotated[Optional[Dict[str, Any]], Field(description="Query parameters to apply to the current query.")] = None, body : Annotated[Optional[Dict[str, Any]], Field(description="Parameters to send with the custom request.")] = None, **kwargs) -> object:  # noqa: E501
        """Send requests to the Algolia REST API.  # noqa: E501

        This method allow you to send requests to the Algolia REST API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put(path, parameters, body, async_req=True)
        >>> result = thread.get()

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param body: Parameters to send with the custom request.
        :type body: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.put_with_http_info(path, parameters, body, **kwargs)  # noqa: E501

    @validate_arguments
    def put_with_http_info(self, path : Annotated[StrictStr, Field(..., description="Path of the endpoint, anything after \"/1\" must be specified.")], parameters : Annotated[Optional[Dict[str, Any]], Field(description="Query parameters to apply to the current query.")] = None, body : Annotated[Optional[Dict[str, Any]], Field(description="Parameters to send with the custom request.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Send requests to the Algolia REST API.  # noqa: E501

        This method allow you to send requests to the Algolia REST API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_with_http_info(path, parameters, body, async_req=True)
        >>> result = thread.get()

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param body: Parameters to send with the custom request.
        :type body: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'path',
            'parameters',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['path']:
            _path_params['path'] = _params['path']


        # process the query parameters
        _query_params = []
        if _params.get('parameters') is not None:  # noqa: E501
            _query_params.append(('parameters', _params['parameters']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['apiKey', 'appId']  # noqa: E501

        _response_types_map = {
            '200': "object",
            '400': "ErrorBase",
            '402': "ErrorBase",
            '403': "ErrorBase",
            '404': "ErrorBase",
        }

        return self.api_client.call_api(
            '/1{path}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def search_recommend_rules(self, index_name : Annotated[StrictStr, Field(..., description="Index on which to perform the request.")], model : Annotated[RecommendModels, Field(..., description="[Recommend models](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models). ")], search_recommend_rules_params : Optional[SearchRecommendRulesParams] = None, **kwargs) -> SearchRecommendRulesResponse:  # noqa: E501
        """List Recommend rules.  # noqa: E501

        List [Recommend rules](https://www.algolia.com/doc/guides/algolia-recommend/how-to/rules/).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_recommend_rules(index_name, model, search_recommend_rules_params, async_req=True)
        >>> result = thread.get()

        :param index_name: Index on which to perform the request. (required)
        :type index_name: str
        :param model: [Recommend models](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).  (required)
        :type model: RecommendModels
        :param search_recommend_rules_params:
        :type search_recommend_rules_params: SearchRecommendRulesParams
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SearchRecommendRulesResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the search_recommend_rules_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.search_recommend_rules_with_http_info(index_name, model, search_recommend_rules_params, **kwargs)  # noqa: E501

    @validate_arguments
    def search_recommend_rules_with_http_info(self, index_name : Annotated[StrictStr, Field(..., description="Index on which to perform the request.")], model : Annotated[RecommendModels, Field(..., description="[Recommend models](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models). ")], search_recommend_rules_params : Optional[SearchRecommendRulesParams] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List Recommend rules.  # noqa: E501

        List [Recommend rules](https://www.algolia.com/doc/guides/algolia-recommend/how-to/rules/).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_recommend_rules_with_http_info(index_name, model, search_recommend_rules_params, async_req=True)
        >>> result = thread.get()

        :param index_name: Index on which to perform the request. (required)
        :type index_name: str
        :param model: [Recommend models](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).  (required)
        :type model: RecommendModels
        :param search_recommend_rules_params:
        :type search_recommend_rules_params: SearchRecommendRulesParams
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SearchRecommendRulesResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'index_name',
            'model',
            'search_recommend_rules_params'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_recommend_rules" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['index_name']:
            _path_params['indexName'] = _params['index_name']

        if _params['model']:
            _path_params['model'] = _params['model']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['search_recommend_rules_params'] is not None:
            _body_params = _params['search_recommend_rules_params']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['apiKey', 'appId']  # noqa: E501

        _response_types_map = {
            '200': "SearchRecommendRulesResponse",
            '400': "ErrorBase",
            '402': "ErrorBase",
            '403': "ErrorBase",
            '404': "ErrorBase",
        }

        return self.api_client.call_api(
            '/1/indexes/{indexName}/{model}/recommend/rules/search', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
