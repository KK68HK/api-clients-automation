# coding: utf-8

"""
    Recommend API

    The Recommend API lets you generate recommendations with several AI models.  > **Note**: You should use Algolia's [libraries and tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) to interact with the Recommend API. Using the HTTP endpoints directly is not covered by the [SLA](https://www.algolia.com/policies/sla/).

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from algoliasearch.models.condition import Condition
from algoliasearch.models.consequence import Consequence
from algoliasearch.models.rule_response_metadata import RuleResponseMetadata


class RuleResponse(BaseModel):
    """
    Rule object.  # noqa: E501
    """

    metadata: Optional[RuleResponseMetadata] = Field(None, alias="_metadata")
    object_id: StrictStr = Field(
        ..., alias="objectID", description="Unique identifier for a rule object."
    )
    conditions: Optional[conlist(Condition)] = Field(
        None,
        description="[Conditions](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/#conditions) required to activate a rule. You can use up to 25 conditions per rule. ",
    )
    consequence: Optional[Consequence] = None
    description: Optional[StrictStr] = Field(
        None,
        description="Description of the rule's purpose. This can be helpful for display in the Algolia dashboard.",
    )
    enabled: Optional[StrictBool] = Field(
        True,
        description="Indicates whether to enable the rule. If it isn't enabled, it isn't applied at query time.",
    )
    __properties = [
        "_metadata",
        "objectID",
        "conditions",
        "consequence",
        "description",
        "enabled",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RuleResponse:
        """Create an instance of RuleResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict["_metadata"] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item in self.conditions:
                if _item:
                    _items.append(_item.to_dict())
            _dict["conditions"] = _items
        # override the default output from pydantic by calling `to_dict()` of consequence
        if self.consequence:
            _dict["consequence"] = self.consequence.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RuleResponse:
        """Create an instance of RuleResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RuleResponse.parse_obj(obj)

        _obj = RuleResponse.parse_obj(
            {
                "metadata": RuleResponseMetadata.from_dict(obj.get("_metadata"))
                if obj.get("_metadata") is not None
                else None,
                "object_id": obj.get("objectID"),
                "conditions": [
                    Condition.from_dict(_item) for _item in obj.get("conditions")
                ]
                if obj.get("conditions") is not None
                else None,
                "consequence": Consequence.from_dict(obj.get("consequence"))
                if obj.get("consequence") is not None
                else None,
                "description": obj.get("description"),
                "enabled": obj.get("enabled")
                if obj.get("enabled") is not None
                else True,
            }
        )
        return _obj
