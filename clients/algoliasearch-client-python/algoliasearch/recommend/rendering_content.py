# coding: utf-8

"""
    Recommend API

    The Recommend API lets you generate recommendations with several AI models.  > **Note**: You should use Algolia's [libraries and tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) to interact with the Recommend API. Using the HTTP endpoints directly is not covered by the [SLA](https://www.algolia.com/policies/sla/).

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from algoliasearch.models.facet_ordering import FacetOrdering


class RenderingContent(BaseModel):
    """
    Extra content for the search UI, for example, to control the [ordering and display of facets](https://www.algolia.com/doc/guides/managing-results/rules/merchandising-and-promoting/how-to/merchandising-facets/#merchandise-facets-and-their-values-in-the-manual-editor). You can set a default value and dynamically override it with [Rules](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/).  # noqa: E501
    """

    facet_ordering: Optional[FacetOrdering] = Field(None, alias="facetOrdering")
    __properties = ["facetOrdering"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RenderingContent:
        """Create an instance of RenderingContent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of facet_ordering
        if self.facet_ordering:
            _dict["facetOrdering"] = self.facet_ordering.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RenderingContent:
        """Create an instance of RenderingContent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RenderingContent.parse_obj(obj)

        _obj = RenderingContent.parse_obj(
            {
                "facet_ordering": FacetOrdering.from_dict(obj.get("facetOrdering"))
                if obj.get("facetOrdering") is not None
                else None
            }
        )
        return _obj
