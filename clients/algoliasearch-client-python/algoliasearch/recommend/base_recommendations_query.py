# coding: utf-8

"""
    Recommend API

    The Recommend API lets you generate recommendations with several AI models.  > **Note**: You should use Algolia's [libraries and tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) to interact with the Recommend API. Using the HTTP endpoints directly is not covered by the [SLA](https://www.algolia.com/policies/sla/).

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from algoliasearch.models.recommendation_models import RecommendationModels
from algoliasearch.models.search_params_object import SearchParamsObject


class BaseRecommendationsQuery(BaseModel):
    """
    BaseRecommendationsQuery
    """

    model: RecommendationModels = Field(...)
    object_id: StrictStr = Field(
        ..., alias="objectID", description="Unique object identifier."
    )
    query_parameters: Optional[SearchParamsObject] = Field(
        None, alias="queryParameters"
    )
    fallback_parameters: Optional[SearchParamsObject] = Field(
        None, alias="fallbackParameters"
    )
    __properties = ["model", "objectID", "queryParameters", "fallbackParameters"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BaseRecommendationsQuery:
        """Create an instance of BaseRecommendationsQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of query_parameters
        if self.query_parameters:
            _dict["queryParameters"] = self.query_parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fallback_parameters
        if self.fallback_parameters:
            _dict["fallbackParameters"] = self.fallback_parameters.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BaseRecommendationsQuery:
        """Create an instance of BaseRecommendationsQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BaseRecommendationsQuery.parse_obj(obj)

        _obj = BaseRecommendationsQuery.parse_obj(
            {
                "model": obj.get("model"),
                "object_id": obj.get("objectID"),
                "query_parameters": SearchParamsObject.from_dict(
                    obj.get("queryParameters")
                )
                if obj.get("queryParameters") is not None
                else None,
                "fallback_parameters": SearchParamsObject.from_dict(
                    obj.get("fallbackParameters")
                )
                if obj.get("fallbackParameters") is not None
                else None,
            }
        )
        return _obj
