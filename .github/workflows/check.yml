name: Checks

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

# Uncomment the line below to enable artifacts debugging
# env:
#   ACTIONS_RUNNER_DEBUG: true

jobs:
  setup:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
      - name: debugging - dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup
        id: setup
        uses: ./.github/actions/setup
        with:
          type: matrix

      - name: Lint GitHub actions
        run: yarn github-actions:lint

      - name: Lint generators
        run: |
          yarn cli format java generators
          diff=$(git status --porcelain ./generators | wc -l)

          if [[ $diff > 0 ]]; then
            echo "Format the generators folder by running 'yarn docker format java generators'"
          fi

          exit $diff

      - name: Lint json files
        run: |
          yarn eslint --ext=json .
          echo 'Use yarn fix:json to fix issues'

    outputs:
      RUN_SCRIPTS: ${{ steps.setup.outputs.RUN_SCRIPTS }}

      SPECS_MATRIX: ${{ steps.setup.outputs.SPECS_MATRIX }}

      RUN_GEN: ${{ steps.setup.outputs.RUN_GEN }}
      GEN_MATRIX: ${{ steps.setup.outputs.GEN_MATRIX }}

      RUN_GEN_JAVASCRIPT: ${{ steps.setup.outputs.RUN_GEN_JAVASCRIPT }}
      RUN_GEN_JAVA: ${{ steps.setup.outputs.RUN_GEN_JAVA }}
      RUN_GEN_PHP: ${{ steps.setup.outputs.RUN_GEN_PHP }}

      RUN_JS_UTILS: ${{ steps.setup.outputs.RUN_JS_UTILS }}

      RUN_CODEGEN: ${{ steps.setup.outputs.RUN_CODEGEN }}

  scripts:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    needs: setup
    if: ${{ needs.setup.outputs.RUN_SCRIPTS == 'true' }}
    steps:
      - uses: actions/checkout@v2

  specs:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    needs: setup
    strategy:
      matrix: ${{ fromJSON(needs.setup.outputs.SPECS_MATRIX) }}
    steps:
      - uses: actions/checkout@v2

  client_javascript_utils:
    timeout-minutes: 10
    runs-on: ubuntu-20.04
    needs: setup
    if: ${{ needs.setup.outputs.RUN_JS_UTILS == 'true' }}
    strategy:
      matrix:
        client:
          - client-common
          - requester-browser-xhr
          - requester-node-http
    steps:
      - uses: actions/checkout@v2

  client_gen:
    timeout-minutes: 15
    runs-on: ubuntu-20.04
    needs:
      - setup
      - specs
      - scripts
      - client_javascript_utils
    if: |
      always() &&
      needs.setup.outputs.RUN_GEN == 'true' &&
      !contains(needs.*.result, 'cancelled') &&
      !contains(needs.*.result, 'failure')
    strategy:
      matrix: ${{ fromJSON(needs.setup.outputs.GEN_MATRIX) }}
    steps:
      - uses: actions/checkout@v2

      - name: Cache clients folder
        id: cache
        uses: actions/cache@v3
        with:
          key: ${{ matrix.client.cacheKey }}
          path: ${{ matrix.client.path }}

      - name: Zip artifact before storing
        run:
          zip -r -y clients-${{ matrix.client.language }}.zip ${{ matrix.client.path }} ${{ matrix.client.testsToStore }} -x \
          "**/node_modules**" "clients/algoliasearch-client-javascript/.yarn**" "**/.github**" "**/build/**" "**/dist/**" "**/.gradle/**" "**/bin/**" "**/vendor/**"

      - name: Store ${{ matrix.client.language }} clients
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: clients-${{matrix.client.language }}
          path: clients-${{matrix.client.language }}.zip

  codegen:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    needs:
      - setup
      - client_gen
    if: |
      always() &&
      !contains(needs.*.result, 'cancelled') &&
      !contains(needs.*.result, 'failure')
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.ALGOLIA_BOT_TOKEN }}

      - name: Download all artifacts
        if: ${{ needs.setup.outputs.RUN_CODEGEN == 'true' }}
        uses: ./.github/actions/restore-artifacts
        with:
          type: all
          matrix: ${{ toJSON(needs.setup.outputs.GEN_MATRIX) }}
          token: ${{ secrets.ALGOLIA_BOT_TOKEN }}

      - name: Setup
        uses: ./.github/actions/setup
        with:
          type: minimal

      - name: Push generated code
        id: pushGeneratedCode
        run: yarn workspace scripts pushGeneratedCode
        env:
          GITHUB_TOKEN: ${{ secrets.ALGOLIA_BOT_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}

      - name: Spread generation to each repository
        if: ${{ steps.pushGeneratedCode.exitcode == 0 && github.ref == 'refs/heads/main' }}
        run: yarn workspace scripts spreadGeneration
        env:
          GITHUB_TOKEN: ${{ secrets.ALGOLIA_BOT_TOKEN }}
