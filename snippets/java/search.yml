- operationId: addApiKey
  code : | 
    ```java
    ApiKey apiKey = new ApiKey(); // 0
    List<Acl> acl1 = new ArrayList<>();
    Acl acl_02 = Acl.fromValue("search");

    acl1.add(acl_02);
    Acl acl_12 = Acl.fromValue("addObject");

    acl1.add(acl_12);

    apiKey0.setAcl(acl1);
    String description1 = "my new api key";

    apiKey0.setDescription(description1);
    int validity1 = 300;

    apiKey0.setValidity(validity1);
    int maxQueriesPerIPPerHour1 = 100;

    apiKey0.setMaxQueriesPerIPPerHour(maxQueriesPerIPPerHour1);
    int maxHitsPerQuery1 = 20;

    apiKey0.setMaxHitsPerQuery(maxHitsPerQuery1);

    client.addApiKey(apiKey0);
    ```

- operationId: addOrUpdateObject
  code : | 
    ```java
    String indexName0 = "indexName";
    String objectID0 = "uniqueID";
    Map<String, String> body0 = new HashMap<>();
    String key1 = "value";

    body0.put("key", key1);

    client.addOrUpdateObject(indexName0, objectID0, body0);
    ```

- operationId: appendSource
  code : | 
    ```java
    Source source = new Source(); // 0
    String source1 = "theSource";

    source0.setSource(source1);
    String description1 = "theDescription";

    source0.setDescription(description1);

    client.appendSource(source0);
    ```

- operationId: assignUserId
  code : | 
    ```java
    String xAlgoliaUserID0 = "userID";
    AssignUserIdParams assignUserIdParams = new AssignUserIdParams(); // 0
    String cluster1 = "theCluster";

    assignUserIdParams0.setCluster(cluster1);

    client.assignUserId(xAlgoliaUserID0, assignUserIdParams0);
    ```

- operationId: batch
  description: allows batch method with `addObject` action
  code : | 
    ```java
    String indexName0 = "theIndexName";
    BatchWriteParams batchWriteParams = new BatchWriteParams(); // 0
    List<BatchRequest> requests1 = new ArrayList<>();
    BatchRequest requests_0 = new BatchRequest(); // 2
    Action action3 = Action.fromValue("addObject");

    requests_02.setAction(action3);
    Map<String, String> body3 = new HashMap<>();
    String key4 = "value";

    body3.put("key", key4);

    requests_02.setBody(body3);

    requests1.add(requests_02);

    batchWriteParams0.setRequests(requests1);

    client.batch(indexName0, batchWriteParams0);
    ```

- operationId: batch
  description: allows batch method with `clear` action
  code : | 
    ```java
    String indexName0 = "theIndexName";
    BatchWriteParams batchWriteParams = new BatchWriteParams(); // 0
    List<BatchRequest> requests1 = new ArrayList<>();
    BatchRequest requests_0 = new BatchRequest(); // 2
    Action action3 = Action.fromValue("clear");

    requests_02.setAction(action3);
    Map<String, String> body3 = new HashMap<>();
    String key4 = "value";

    body3.put("key", key4);

    requests_02.setBody(body3);

    requests1.add(requests_02);

    batchWriteParams0.setRequests(requests1);

    client.batch(indexName0, batchWriteParams0);
    ```

- operationId: batch
  description: allows batch method with `delete` action
  code : | 
    ```java
    String indexName0 = "theIndexName";
    BatchWriteParams batchWriteParams = new BatchWriteParams(); // 0
    List<BatchRequest> requests1 = new ArrayList<>();
    BatchRequest requests_0 = new BatchRequest(); // 2
    Action action3 = Action.fromValue("delete");

    requests_02.setAction(action3);
    Map<String, String> body3 = new HashMap<>();
    String key4 = "value";

    body3.put("key", key4);

    requests_02.setBody(body3);

    requests1.add(requests_02);

    batchWriteParams0.setRequests(requests1);

    client.batch(indexName0, batchWriteParams0);
    ```

- operationId: batch
  description: allows batch method with `deleteObject` action
  code : | 
    ```java
    String indexName0 = "theIndexName";
    BatchWriteParams batchWriteParams = new BatchWriteParams(); // 0
    List<BatchRequest> requests1 = new ArrayList<>();
    BatchRequest requests_0 = new BatchRequest(); // 2
    Action action3 = Action.fromValue("deleteObject");

    requests_02.setAction(action3);
    Map<String, String> body3 = new HashMap<>();
    String key4 = "value";

    body3.put("key", key4);

    requests_02.setBody(body3);

    requests1.add(requests_02);

    batchWriteParams0.setRequests(requests1);

    client.batch(indexName0, batchWriteParams0);
    ```

- operationId: batch
  description: allows batch method with `partialUpdateObject` action
  code : | 
    ```java
    String indexName0 = "theIndexName";
    BatchWriteParams batchWriteParams = new BatchWriteParams(); // 0
    List<BatchRequest> requests1 = new ArrayList<>();
    BatchRequest requests_0 = new BatchRequest(); // 2
    Action action3 = Action.fromValue("partialUpdateObject");

    requests_02.setAction(action3);
    Map<String, String> body3 = new HashMap<>();
    String key4 = "value";

    body3.put("key", key4);

    requests_02.setBody(body3);

    requests1.add(requests_02);

    batchWriteParams0.setRequests(requests1);

    client.batch(indexName0, batchWriteParams0);
    ```

- operationId: batch
  description: allows batch method with `partialUpdateObjectNoCreate` action
  code : | 
    ```java
    String indexName0 = "theIndexName";
    BatchWriteParams batchWriteParams = new BatchWriteParams(); // 0
    List<BatchRequest> requests1 = new ArrayList<>();
    BatchRequest requests_0 = new BatchRequest(); // 2
    Action action3 = Action.fromValue("partialUpdateObjectNoCreate");

    requests_02.setAction(action3);
    Map<String, String> body3 = new HashMap<>();
    String key4 = "value";

    body3.put("key", key4);

    requests_02.setBody(body3);

    requests1.add(requests_02);

    batchWriteParams0.setRequests(requests1);

    client.batch(indexName0, batchWriteParams0);
    ```

- operationId: batch
  description: allows batch method with `updateObject` action
  code : | 
    ```java
    String indexName0 = "theIndexName";
    BatchWriteParams batchWriteParams = new BatchWriteParams(); // 0
    List<BatchRequest> requests1 = new ArrayList<>();
    BatchRequest requests_0 = new BatchRequest(); // 2
    Action action3 = Action.fromValue("updateObject");

    requests_02.setAction(action3);
    Map<String, String> body3 = new HashMap<>();
    String key4 = "value";

    body3.put("key", key4);

    requests_02.setBody(body3);

    requests1.add(requests_02);

    batchWriteParams0.setRequests(requests1);

    client.batch(indexName0, batchWriteParams0);
    ```

- operationId: batchAssignUserIds
  code : | 
    ```java
    String xAlgoliaUserID0 = "userID";
    BatchAssignUserIdsParams batchAssignUserIdsParams = new BatchAssignUserIdsParams(); // 0
    String cluster1 = "theCluster";

    batchAssignUserIdsParams0.setCluster(cluster1);
    List<String> users1 = new ArrayList<>();
    String users_02 = "user1";

    users1.add(users_02);
    String users_12 = "user2";

    users1.add(users_12);

    batchAssignUserIdsParams0.setUsers(users1);

    client.batchAssignUserIds(xAlgoliaUserID0, batchAssignUserIdsParams0);
    ```

- operationId: batchDictionaryEntries
  description: get batchDictionaryEntries results with minimal parameters
  code : | 
    ```java
    DictionaryType dictionaryName0 = DictionaryType.fromValue("compounds");
    BatchDictionaryEntriesParams batchDictionaryEntriesParams = new BatchDictionaryEntriesParams(); // 0
    List<BatchDictionaryEntriesRequest> requests1 = new ArrayList<>();
    BatchDictionaryEntriesRequest requests_0 = new BatchDictionaryEntriesRequest(); // 2
    DictionaryAction action3 = DictionaryAction.fromValue("addEntry");

    requests_02.setAction(action3);
    DictionaryEntry body = new DictionaryEntry(); // 3
    String objectID4 = "1";

    body3.setObjectID(objectID4);
    String language4 = "en";

    body3.setLanguage(language4);

    requests_02.setBody(body3);

    requests1.add(requests_02);
    BatchDictionaryEntriesRequest requests_1 = new BatchDictionaryEntriesRequest(); // 2
    DictionaryAction action3 = DictionaryAction.fromValue("deleteEntry");

    requests_12.setAction(action3);
    DictionaryEntry body = new DictionaryEntry(); // 3
    String objectID4 = "2";

    body3.setObjectID(objectID4);
    String language4 = "fr";

    body3.setLanguage(language4);

    requests_12.setBody(body3);

    requests1.add(requests_12);

    batchDictionaryEntriesParams0.setRequests(requests1);

    client.batchDictionaryEntries(dictionaryName0, batchDictionaryEntriesParams0);
    ```

- operationId: batchDictionaryEntries
  description: get batchDictionaryEntries results with all parameters
  code : | 
    ```java
    DictionaryType dictionaryName0 = DictionaryType.fromValue("compounds");
    BatchDictionaryEntriesParams batchDictionaryEntriesParams = new BatchDictionaryEntriesParams(); // 0
    boolean clearExistingDictionaryEntries1 = false;

    batchDictionaryEntriesParams0.setClearExistingDictionaryEntries(clearExistingDictionaryEntries1);
    List<BatchDictionaryEntriesRequest> requests1 = new ArrayList<>();
    BatchDictionaryEntriesRequest requests_0 = new BatchDictionaryEntriesRequest(); // 2
    DictionaryAction action3 = DictionaryAction.fromValue("addEntry");

    requests_02.setAction(action3);
    DictionaryEntry body = new DictionaryEntry(); // 3
    String objectID4 = "1";

    body3.setObjectID(objectID4);
    String language4 = "en";

    body3.setLanguage(language4);
    String word4 = "fancy";

    body3.setWord(word4);
    List<String> words4 = new ArrayList<>();
    String words_05 = "believe";

    words4.add(words_05);
    String words_15 = "algolia";

    words4.add(words_15);

    body3.setWords(words4);
    List<String> decomposition4 = new ArrayList<>();
    String decomposition_05 = "trust";

    decomposition4.add(decomposition_05);
    String decomposition_15 = "algolia";

    decomposition4.add(decomposition_15);

    body3.setDecomposition(decomposition4);
    DictionaryEntryState state4 = DictionaryEntryState.fromValue("enabled");

    body3.setState(state4);

    requests_02.setBody(body3);

    requests1.add(requests_02);
    BatchDictionaryEntriesRequest requests_1 = new BatchDictionaryEntriesRequest(); // 2
    DictionaryAction action3 = DictionaryAction.fromValue("deleteEntry");

    requests_12.setAction(action3);
    DictionaryEntry body = new DictionaryEntry(); // 3
    String objectID4 = "2";

    body3.setObjectID(objectID4);
    String language4 = "fr";

    body3.setLanguage(language4);
    String word4 = "humility";

    body3.setWord(word4);
    List<String> words4 = new ArrayList<>();
    String words_05 = "candor";

    words4.add(words_05);
    String words_15 = "algolia";

    words4.add(words_15);

    body3.setWords(words4);
    List<String> decomposition4 = new ArrayList<>();
    String decomposition_05 = "grit";

    decomposition4.add(decomposition_05);
    String decomposition_15 = "algolia";

    decomposition4.add(decomposition_15);

    body3.setDecomposition(decomposition4);
    DictionaryEntryState state4 = DictionaryEntryState.fromValue("enabled");

    body3.setState(state4);

    requests_12.setBody(body3);

    requests1.add(requests_12);

    batchDictionaryEntriesParams0.setRequests(requests1);

    client.batchDictionaryEntries(dictionaryName0, batchDictionaryEntriesParams0);
    ```

- operationId: batchDictionaryEntries
  description: get batchDictionaryEntries results additional properties
  code : | 
    ```java
    DictionaryType dictionaryName0 = DictionaryType.fromValue("compounds");
    BatchDictionaryEntriesParams batchDictionaryEntriesParams = new BatchDictionaryEntriesParams(); // 0
    List<BatchDictionaryEntriesRequest> requests1 = new ArrayList<>();
    BatchDictionaryEntriesRequest requests_0 = new BatchDictionaryEntriesRequest(); // 2
    DictionaryAction action3 = DictionaryAction.fromValue("addEntry");

    requests_02.setAction(action3);
    DictionaryEntry body = new DictionaryEntry(); // 3
    String objectID4 = "1";

    body3.setObjectID(objectID4);
    String language4 = "en";

    body3.setLanguage(language4);
    String additional4 = "try me";

    body3.setAdditionalProperty("additional", additional4);

    requests_02.setBody(body3);

    requests1.add(requests_02);

    batchDictionaryEntriesParams0.setRequests(requests1);

    client.batchDictionaryEntries(dictionaryName0, batchDictionaryEntriesParams0);
    ```

- operationId: browse
  description: browse with minimal parameters
  code : | 
    ```java
    String indexName0 = "indexName";

    client.browse(indexName0, Object.class);
    ```

- operationId: browse
  description: browse with search parameters
  code : | 
    ```java
    String indexName0 = "indexName";
    BrowseParamsObject browseParams = new BrowseParamsObject(); // 0
    String query1 = "myQuery";

    browseParams0.setQuery(query1);
    List<MixedSearchFilters> facetFilters1 = new ArrayList<>();
    String facetFilters_02 = "tags:algolia";

    facetFilters1.add(MixedSearchFilters.of(facetFilters_02));

    browseParams0.setFacetFilters(FacetFilters.of(facetFilters1));

    client.browse(indexName0, BrowseParams.of(browseParams0), Object.class);
    ```

- operationId: browse
  description: browse allow a cursor in parameters
  code : | 
    ```java
    String indexName0 = "indexName";
    BrowseParamsObject browseParams = new BrowseParamsObject(); // 0
    String cursor1 = "test";

    browseParams0.setCursor(cursor1);

    client.browse(indexName0, BrowseParams.of(browseParams0), Object.class);
    ```

- operationId: clearAllSynonyms
  code : | 
    ```java
    String indexName0 = "indexName";

    client.clearAllSynonyms(indexName0);
    ```

- operationId: clearObjects
  code : | 
    ```java
    String indexName0 = "theIndexName";

    client.clearObjects(indexName0);
    ```

- operationId: clearRules
  code : | 
    ```java
    String indexName0 = "indexName";

    client.clearRules(indexName0);
    ```

- operationId: del
  description: allow del method for a custom path with minimal parameters
  code : | 
    ```java
    String path0 = "/test/minimal";

    client.del(path0);
    ```

- operationId: del
  description: allow del method for a custom path with all parameters
  code : | 
    ```java
    String path0 = "/test/all";
    Map<String, Object> parameters0 = new HashMap<>();
    String query1 = "parameters";

    parameters0.put("query", query1);

    client.del(path0, parameters0);
    ```

- operationId: deleteApiKey
  code : | 
    ```java
    String key0 = "myTestApiKey";

    client.deleteApiKey(key0);
    ```

- operationId: deleteBy
  code : | 
    ```java
    String indexName0 = "theIndexName";
    DeleteByParams deleteByParams = new DeleteByParams(); // 0
    String filters1 = "brand:brandName";

    deleteByParams0.setFilters(filters1);

    client.deleteBy(indexName0, deleteByParams0);
    ```

- operationId: deleteIndex
  code : | 
    ```java
    String indexName0 = "theIndexName";

    client.deleteIndex(indexName0);
    ```

- operationId: deleteObject
  code : | 
    ```java
    String indexName0 = "theIndexName";
    String objectID0 = "uniqueID";

    client.deleteObject(indexName0, objectID0);
    ```

- operationId: deleteRule
  code : | 
    ```java
    String indexName0 = "indexName";
    String objectID0 = "id1";

    client.deleteRule(indexName0, objectID0);
    ```

- operationId: deleteSource
  code : | 
    ```java
    String source0 = "theSource";

    client.deleteSource(source0);
    ```

- operationId: deleteSynonym
  code : | 
    ```java
    String indexName0 = "indexName";
    String objectID0 = "id1";

    client.deleteSynonym(indexName0, objectID0);
    ```

- operationId: get
  description: allow get method for a custom path with minimal parameters
  code : | 
    ```java
    String path0 = "/test/minimal";

    client.get(path0);
    ```

- operationId: get
  description: allow get method for a custom path with all parameters
  code : | 
    ```java
    String path0 = "/test/all";
    Map<String, Object> parameters0 = new HashMap<>();
    String query1 = "parameters";

    parameters0.put("query", query1);

    client.get(path0, parameters0);
    ```

- operationId: getApiKey
  code : | 
    ```java
    String key0 = "myTestApiKey";

    client.getApiKey(key0);
    ```

- operationId: getDictionaryLanguages
  description: get getDictionaryLanguages
  code : | 
    ```java

    client.getDictionaryLanguages();
    ```

- operationId: getDictionarySettings
  description: get getDictionarySettings results
  code : | 
    ```java

    client.getDictionarySettings();
    ```

- operationId: getLogs
  description: getLogs with minimal parameters
  code : | 
    ```java

    client.getLogs();
    ```

- operationId: getLogs
  description: getLogs with parameters
  code : | 
    ```java
    int offset0 = 5;
    int length0 = 10;
    String indexName0 = "theIndexName";
    LogType type0 = LogType.fromValue("all");

    client.getLogs(offset0, length0, indexName0, type0);
    ```

- operationId: getObject
  code : | 
    ```java
    String indexName0 = "theIndexName";
    String objectID0 = "uniqueID";
    List<String> attributesToRetrieve0 = new ArrayList<>();
    String attributesToRetrieve_01 = "attr1";

    attributesToRetrieve0.add(attributesToRetrieve_01);
    String attributesToRetrieve_11 = "attr2";

    attributesToRetrieve0.add(attributesToRetrieve_11);

    client.getObject(indexName0, objectID0, attributesToRetrieve0);
    ```

- operationId: getObjects
  code : | 
    ```java
    GetObjectsParams getObjectsParams = new GetObjectsParams(); // 0
    List<GetObjectsRequest> requests1 = new ArrayList<>();
    GetObjectsRequest requests_0 = new GetObjectsRequest(); // 2
    List<String> attributesToRetrieve3 = new ArrayList<>();
    String attributesToRetrieve_04 = "attr1";

    attributesToRetrieve3.add(attributesToRetrieve_04);
    String attributesToRetrieve_14 = "attr2";

    attributesToRetrieve3.add(attributesToRetrieve_14);

    requests_02.setAttributesToRetrieve(attributesToRetrieve3);
    String objectID3 = "uniqueID";

    requests_02.setObjectID(objectID3);
    String indexName3 = "theIndexName";

    requests_02.setIndexName(indexName3);

    requests1.add(requests_02);

    getObjectsParams0.setRequests(requests1);

    client.getObjects(getObjectsParams0, Object.class);
    ```

- operationId: getRule
  code : | 
    ```java
    String indexName0 = "indexName";
    String objectID0 = "id1";

    client.getRule(indexName0, objectID0);
    ```

- operationId: getSettings
  code : | 
    ```java
    String indexName0 = "theIndexName";

    client.getSettings(indexName0);
    ```

- operationId: getSources
  code : | 
    ```java

    client.getSources();
    ```

- operationId: getSynonym
  code : | 
    ```java
    String indexName0 = "indexName";
    String objectID0 = "id1";

    client.getSynonym(indexName0, objectID0);
    ```

- operationId: getTask
  code : | 
    ```java
    String indexName0 = "theIndexName";
    long taskID0 = 123L;

    client.getTask(indexName0, taskID0);
    ```

- operationId: getTopUserIds
  code : | 
    ```java

    client.getTopUserIds();
    ```

- operationId: getUserId
  code : | 
    ```java
    String userID0 = "uniqueID";

    client.getUserId(userID0);
    ```

- operationId: hasPendingMappings
  description: hasPendingMappings with minimal parameters
  code : | 
    ```java

    client.hasPendingMappings();
    ```

- operationId: hasPendingMappings
  description: hasPendingMappings with parameters
  code : | 
    ```java
    boolean getClusters0 = true;

    client.hasPendingMappings(getClusters0);
    ```

- operationId: listApiKeys
  code : | 
    ```java

    client.listApiKeys();
    ```

- operationId: listClusters
  code : | 
    ```java

    client.listClusters();
    ```

- operationId: listIndices
  description: listIndices with minimal parameters
  code : | 
    ```java

    client.listIndices();
    ```

- operationId: listIndices
  description: listIndices with parameters
  code : | 
    ```java
    int page0 = 8;
    int hitsPerPage0 = 3;

    client.listIndices(page0, hitsPerPage0);
    ```

- operationId: listUserIds
  description: listUserIds with minimal parameters
  code : | 
    ```java

    client.listUserIds();
    ```

- operationId: listUserIds
  description: listUserIds with parameters
  code : | 
    ```java
    int page0 = 8;
    int hitsPerPage0 = 100;

    client.listUserIds(page0, hitsPerPage0);
    ```

- operationId: multipleBatch
  code : | 
    ```java
    BatchParams batchParams = new BatchParams(); // 0
    List<MultipleBatchRequest> requests1 = new ArrayList<>();
    MultipleBatchRequest requests_0 = new MultipleBatchRequest(); // 2
    Action action3 = Action.fromValue("addObject");

    requests_02.setAction(action3);
    Map<String, String> body3 = new HashMap<>();
    String key4 = "value";

    body3.put("key", key4);

    requests_02.setBody(body3);
    String indexName3 = "theIndexName";

    requests_02.setIndexName(indexName3);

    requests1.add(requests_02);

    batchParams0.setRequests(requests1);

    client.multipleBatch(batchParams0);
    ```

- operationId: operationIndex
  code : | 
    ```java
    String indexName0 = "theIndexName";
    OperationIndexParams operationIndexParams = new OperationIndexParams(); // 0
    OperationType operation1 = OperationType.fromValue("copy");

    operationIndexParams0.setOperation(operation1);
    String destination1 = "dest";

    operationIndexParams0.setDestination(destination1);
    List<ScopeType> scope1 = new ArrayList<>();
    ScopeType scope_02 = ScopeType.fromValue("rules");

    scope1.add(scope_02);
    ScopeType scope_12 = ScopeType.fromValue("settings");

    scope1.add(scope_12);

    operationIndexParams0.setScope(scope1);

    client.operationIndex(indexName0, operationIndexParams0);
    ```

- operationId: partialUpdateObject
  code : | 
    ```java
    String indexName0 = "theIndexName";
    String objectID0 = "uniqueID";
    Map<String, AttributeToUpdate> attributesToUpdate0 = new HashMap<>();
    String id11 = "test";

    attributesToUpdate0.put("id1", AttributeToUpdate.of(id11));
    BuiltInOperation id2 = new BuiltInOperation(); // 1
    BuiltInOperationType operation2 = BuiltInOperationType.fromValue("AddUnique");

    id21.setOperation(operation2);
    String value2 = "test2";

    id21.setValue(value2);

    attributesToUpdate0.put("id2", AttributeToUpdate.of(id21));
    boolean createIfNotExists0 = true;

    client.partialUpdateObject(indexName0, objectID0, attributesToUpdate0, createIfNotExists0);
    ```

- operationId: post
  description: allow post method for a custom path with minimal parameters
  code : | 
    ```java
    String path0 = "/test/minimal";

    client.post(path0);
    ```

- operationId: post
  description: allow post method for a custom path with all parameters
  code : | 
    ```java
    String path0 = "/test/all";
    Map<String, Object> parameters0 = new HashMap<>();
    String query1 = "parameters";

    parameters0.put("query", query1);
    Map<String, String> body0 = new HashMap<>();
    String body1 = "parameters";

    body0.put("body", body1);

    client.post(path0, parameters0, body0);
    ```

- operationId: post
  description: requestOptions can override default query parameters
  code : | 
    ```java
    String path0 = "/test/requestOptions";
    Map<String, Object> parameters0 = new HashMap<>();
    String query1 = "parameters";

    parameters0.put("query", query1);
    Map<String, String> body0 = new HashMap<>();
    String facet1 = "filters";

    body0.put("facet", facet1);

    client.post(path0, parameters0, body0, requestOptions);
    ```

- operationId: post
  description: requestOptions merges query parameters with default ones
  code : | 
    ```java
    String path0 = "/test/requestOptions";
    Map<String, Object> parameters0 = new HashMap<>();
    String query1 = "parameters";

    parameters0.put("query", query1);
    Map<String, String> body0 = new HashMap<>();
    String facet1 = "filters";

    body0.put("facet", facet1);

    client.post(path0, parameters0, body0, requestOptions);
    ```

- operationId: post
  description: requestOptions can override default headers
  code : | 
    ```java
    String path0 = "/test/requestOptions";
    Map<String, Object> parameters0 = new HashMap<>();
    String query1 = "parameters";

    parameters0.put("query", query1);
    Map<String, String> body0 = new HashMap<>();
    String facet1 = "filters";

    body0.put("facet", facet1);

    client.post(path0, parameters0, body0, requestOptions);
    ```

- operationId: post
  description: requestOptions merges headers with default ones
  code : | 
    ```java
    String path0 = "/test/requestOptions";
    Map<String, Object> parameters0 = new HashMap<>();
    String query1 = "parameters";

    parameters0.put("query", query1);
    Map<String, String> body0 = new HashMap<>();
    String facet1 = "filters";

    body0.put("facet", facet1);

    client.post(path0, parameters0, body0, requestOptions);
    ```

- operationId: post
  description: requestOptions queryParameters accepts booleans
  code : | 
    ```java
    String path0 = "/test/requestOptions";
    Map<String, Object> parameters0 = new HashMap<>();
    String query1 = "parameters";

    parameters0.put("query", query1);
    Map<String, String> body0 = new HashMap<>();
    String facet1 = "filters";

    body0.put("facet", facet1);

    client.post(path0, parameters0, body0, requestOptions);
    ```

- operationId: post
  description: requestOptions queryParameters accepts integers
  code : | 
    ```java
    String path0 = "/test/requestOptions";
    Map<String, Object> parameters0 = new HashMap<>();
    String query1 = "parameters";

    parameters0.put("query", query1);
    Map<String, String> body0 = new HashMap<>();
    String facet1 = "filters";

    body0.put("facet", facet1);

    client.post(path0, parameters0, body0, requestOptions);
    ```

- operationId: post
  description: requestOptions queryParameters accepts list of string
  code : | 
    ```java
    String path0 = "/test/requestOptions";
    Map<String, Object> parameters0 = new HashMap<>();
    String query1 = "parameters";

    parameters0.put("query", query1);
    Map<String, String> body0 = new HashMap<>();
    String facet1 = "filters";

    body0.put("facet", facet1);

    client.post(path0, parameters0, body0, requestOptions);
    ```

- operationId: post
  description: requestOptions queryParameters accepts list of booleans
  code : | 
    ```java
    String path0 = "/test/requestOptions";
    Map<String, Object> parameters0 = new HashMap<>();
    String query1 = "parameters";

    parameters0.put("query", query1);
    Map<String, String> body0 = new HashMap<>();
    String facet1 = "filters";

    body0.put("facet", facet1);

    client.post(path0, parameters0, body0, requestOptions);
    ```

- operationId: post
  description: requestOptions queryParameters accepts list of integers
  code : | 
    ```java
    String path0 = "/test/requestOptions";
    Map<String, Object> parameters0 = new HashMap<>();
    String query1 = "parameters";

    parameters0.put("query", query1);
    Map<String, String> body0 = new HashMap<>();
    String facet1 = "filters";

    body0.put("facet", facet1);

    client.post(path0, parameters0, body0, requestOptions);
    ```

- operationId: put
  description: allow put method for a custom path with minimal parameters
  code : | 
    ```java
    String path0 = "/test/minimal";

    client.put(path0);
    ```

- operationId: put
  description: allow put method for a custom path with all parameters
  code : | 
    ```java
    String path0 = "/test/all";
    Map<String, Object> parameters0 = new HashMap<>();
    String query1 = "parameters";

    parameters0.put("query", query1);
    Map<String, String> body0 = new HashMap<>();
    String body1 = "parameters";

    body0.put("body", body1);

    client.put(path0, parameters0, body0);
    ```

- operationId: removeUserId
  code : | 
    ```java
    String userID0 = "uniqueID";

    client.removeUserId(userID0);
    ```

- operationId: replaceSources
  code : | 
    ```java
    List<Source> source0 = new ArrayList<>();
    Source source_0 = new Source(); // 1
    String source2 = "theSource";

    source_01.setSource(source2);
    String description2 = "theDescription";

    source_01.setDescription(description2);

    source0.add(source_01);

    client.replaceSources(source0);
    ```

- operationId: restoreApiKey
  code : | 
    ```java
    String key0 = "myApiKey";

    client.restoreApiKey(key0);
    ```

- operationId: saveObject
  code : | 
    ```java
    String indexName0 = "theIndexName";
    Map<String, String> body0 = new HashMap<>();
    String objectID1 = "id";

    body0.put("objectID", objectID1);
    String test1 = "val";

    body0.put("test", test1);

    client.saveObject(indexName0, body0);
    ```

- operationId: saveRule
  description: saveRule with minimal parameters
  code : | 
    ```java
    String indexName0 = "indexName";
    String objectID0 = "id1";
    Rule rule = new Rule(); // 0
    String objectID1 = "id1";

    rule0.setObjectID(objectID1);
    List<Condition> conditions1 = new ArrayList<>();
    Condition conditions_0 = new Condition(); // 2
    String pattern3 = "apple";

    conditions_02.setPattern(pattern3);
    Anchoring anchoring3 = Anchoring.fromValue("contains");

    conditions_02.setAnchoring(anchoring3);

    conditions1.add(conditions_02);

    rule0.setConditions(conditions1);

    client.saveRule(indexName0, objectID0, rule0);
    ```

- operationId: saveRule
  description: saveRule with all parameters
  code : | 
    ```java
    String indexName0 = "indexName";
    String objectID0 = "id1";
    Rule rule = new Rule(); // 0
    String objectID1 = "id1";

    rule0.setObjectID(objectID1);
    List<Condition> conditions1 = new ArrayList<>();
    Condition conditions_0 = new Condition(); // 2
    String pattern3 = "apple";

    conditions_02.setPattern(pattern3);
    Anchoring anchoring3 = Anchoring.fromValue("contains");

    conditions_02.setAnchoring(anchoring3);
    boolean alternatives3 = false;

    conditions_02.setAlternatives(alternatives3);
    String context3 = "search";

    conditions_02.setContext(context3);

    conditions1.add(conditions_02);

    rule0.setConditions(conditions1);
    Consequence consequence = new Consequence(); // 1
    ConsequenceParams params = new ConsequenceParams(); // 2
    String filters3 = "brand:apple";

    params2.setFilters(filters3);
    ConsequenceQueryObject query = new ConsequenceQueryObject(); // 3
    List<String> remove4 = new ArrayList<>();
    String remove_05 = "algolia";

    remove4.add(remove_05);

    query3.setRemove(remove4);
    List<Edit> edits4 = new ArrayList<>();
    Edit edits_0 = new Edit(); // 5
    EditType type6 = EditType.fromValue("remove");

    edits_05.setType(type6);
    String delete6 = "abc";

    edits_05.setDelete(delete6);
    String insert6 = "cde";

    edits_05.setInsert(insert6);

    edits4.add(edits_05);
    Edit edits_1 = new Edit(); // 5
    EditType type6 = EditType.fromValue("replace");

    edits_15.setType(type6);
    String delete6 = "abc";

    edits_15.setDelete(delete6);
    String insert6 = "cde";

    edits_15.setInsert(insert6);

    edits4.add(edits_15);

    query3.setEdits(edits4);

    params2.setQuery(ConsequenceQuery.of(query3));

    consequence1.setParams(params2);
    List<ConsequenceHide> hide2 = new ArrayList<>();
    ConsequenceHide hide_0 = new ConsequenceHide(); // 3
    String objectID4 = "321";

    hide_03.setObjectID(objectID4);

    hide2.add(hide_03);

    consequence1.setHide(hide2);
    boolean filterPromotes2 = false;

    consequence1.setFilterPromotes(filterPromotes2);
    Map<String, String> userData2 = new HashMap<>();
    String algolia3 = "aloglia";

    userData2.put("algolia", algolia3);

    consequence1.setUserData(userData2);
    List<Promote> promote2 = new ArrayList<>();
    PromoteObjectID promote_0 = new PromoteObjectID(); // 3
    String objectID4 = "abc";

    promote_03.setObjectID(objectID4);
    int position4 = 3;

    promote_03.setPosition(position4);

    promote2.add(Promote.of(promote_03));
    PromoteObjectIDs promote_1 = new PromoteObjectIDs(); // 3
    List<String> objectIDs4 = new ArrayList<>();
    String objectIDs_05 = "abc";

    objectIDs4.add(objectIDs_05);
    String objectIDs_15 = "def";

    objectIDs4.add(objectIDs_15);

    promote_13.setObjectIDs(objectIDs4);
    int position4 = 1;

    promote_13.setPosition(position4);

    promote2.add(Promote.of(promote_13));

    consequence1.setPromote(promote2);

    rule0.setConsequence(consequence1);
    String description1 = "test";

    rule0.setDescription(description1);
    boolean enabled1 = true;

    rule0.setEnabled(enabled1);
    List<TimeRange> validity1 = new ArrayList<>();
    TimeRange validity_0 = new TimeRange(); // 2
    int from3 = 1656670273;

    validity_02.setFrom(from3);
    int until3 = 1656670277;

    validity_02.setUntil(until3);

    validity1.add(validity_02);

    rule0.setValidity(validity1);
    boolean forwardToReplicas0 = true;

    client.saveRule(indexName0, objectID0, rule0, forwardToReplicas0);
    ```

- operationId: saveRules
  description: saveRules with minimal parameters
  code : | 
    ```java
    String indexName0 = "indexName";
    List<Rule> rules0 = new ArrayList<>();
    Rule rules_0 = new Rule(); // 1
    String objectID2 = "a-rule-id";

    rules_01.setObjectID(objectID2);
    List<Condition> conditions2 = new ArrayList<>();
    Condition conditions_0 = new Condition(); // 3
    String pattern4 = "smartphone";

    conditions_03.setPattern(pattern4);
    Anchoring anchoring4 = Anchoring.fromValue("contains");

    conditions_03.setAnchoring(anchoring4);

    conditions2.add(conditions_03);

    rules_01.setConditions(conditions2);

    rules0.add(rules_01);
    Rule rules_1 = new Rule(); // 1
    String objectID2 = "a-second-rule-id";

    rules_11.setObjectID(objectID2);
    List<Condition> conditions2 = new ArrayList<>();
    Condition conditions_0 = new Condition(); // 3
    String pattern4 = "apple";

    conditions_03.setPattern(pattern4);
    Anchoring anchoring4 = Anchoring.fromValue("contains");

    conditions_03.setAnchoring(anchoring4);

    conditions2.add(conditions_03);

    rules_11.setConditions(conditions2);

    rules0.add(rules_11);

    client.saveRules(indexName0, rules0);
    ```

- operationId: saveRules
  description: saveRules with all parameters
  code : | 
    ```java
    String indexName0 = "indexName";
    List<Rule> rules0 = new ArrayList<>();
    Rule rules_0 = new Rule(); // 1
    String objectID2 = "id1";

    rules_01.setObjectID(objectID2);
    List<Condition> conditions2 = new ArrayList<>();
    Condition conditions_0 = new Condition(); // 3
    String pattern4 = "apple";

    conditions_03.setPattern(pattern4);
    Anchoring anchoring4 = Anchoring.fromValue("contains");

    conditions_03.setAnchoring(anchoring4);
    boolean alternatives4 = false;

    conditions_03.setAlternatives(alternatives4);
    String context4 = "search";

    conditions_03.setContext(context4);

    conditions2.add(conditions_03);

    rules_01.setConditions(conditions2);
    Consequence consequence = new Consequence(); // 2
    ConsequenceParams params = new ConsequenceParams(); // 3
    String filters4 = "brand:apple";

    params3.setFilters(filters4);
    ConsequenceQueryObject query = new ConsequenceQueryObject(); // 4
    List<String> remove5 = new ArrayList<>();
    String remove_06 = "algolia";

    remove5.add(remove_06);

    query4.setRemove(remove5);
    List<Edit> edits5 = new ArrayList<>();
    Edit edits_0 = new Edit(); // 6
    EditType type7 = EditType.fromValue("remove");

    edits_06.setType(type7);
    String delete7 = "abc";

    edits_06.setDelete(delete7);
    String insert7 = "cde";

    edits_06.setInsert(insert7);

    edits5.add(edits_06);
    Edit edits_1 = new Edit(); // 6
    EditType type7 = EditType.fromValue("replace");

    edits_16.setType(type7);
    String delete7 = "abc";

    edits_16.setDelete(delete7);
    String insert7 = "cde";

    edits_16.setInsert(insert7);

    edits5.add(edits_16);

    query4.setEdits(edits5);

    params3.setQuery(ConsequenceQuery.of(query4));

    consequence2.setParams(params3);
    List<ConsequenceHide> hide3 = new ArrayList<>();
    ConsequenceHide hide_0 = new ConsequenceHide(); // 4
    String objectID5 = "321";

    hide_04.setObjectID(objectID5);

    hide3.add(hide_04);

    consequence2.setHide(hide3);
    boolean filterPromotes3 = false;

    consequence2.setFilterPromotes(filterPromotes3);
    Map<String, String> userData3 = new HashMap<>();
    String algolia4 = "aloglia";

    userData3.put("algolia", algolia4);

    consequence2.setUserData(userData3);
    List<Promote> promote3 = new ArrayList<>();
    PromoteObjectID promote_0 = new PromoteObjectID(); // 4
    String objectID5 = "abc";

    promote_04.setObjectID(objectID5);
    int position5 = 3;

    promote_04.setPosition(position5);

    promote3.add(Promote.of(promote_04));
    PromoteObjectIDs promote_1 = new PromoteObjectIDs(); // 4
    List<String> objectIDs5 = new ArrayList<>();
    String objectIDs_06 = "abc";

    objectIDs5.add(objectIDs_06);
    String objectIDs_16 = "def";

    objectIDs5.add(objectIDs_16);

    promote_14.setObjectIDs(objectIDs5);
    int position5 = 1;

    promote_14.setPosition(position5);

    promote3.add(Promote.of(promote_14));

    consequence2.setPromote(promote3);

    rules_01.setConsequence(consequence2);
    String description2 = "test";

    rules_01.setDescription(description2);
    boolean enabled2 = true;

    rules_01.setEnabled(enabled2);
    List<TimeRange> validity2 = new ArrayList<>();
    TimeRange validity_0 = new TimeRange(); // 3
    int from4 = 1656670273;

    validity_03.setFrom(from4);
    int until4 = 1656670277;

    validity_03.setUntil(until4);

    validity2.add(validity_03);

    rules_01.setValidity(validity2);

    rules0.add(rules_01);
    boolean forwardToReplicas0 = true;
    boolean clearExistingRules0 = true;

    client.saveRules(indexName0, rules0, forwardToReplicas0, clearExistingRules0);
    ```

- operationId: saveSynonym
  code : | 
    ```java
    String indexName0 = "indexName";
    String objectID0 = "id1";
    SynonymHit synonymHit = new SynonymHit(); // 0
    String objectID1 = "id1";

    synonymHit0.setObjectID(objectID1);
    SynonymType type1 = SynonymType.fromValue("synonym");

    synonymHit0.setType(type1);
    List<String> synonyms1 = new ArrayList<>();
    String synonyms_02 = "car";

    synonyms1.add(synonyms_02);
    String synonyms_12 = "vehicule";

    synonyms1.add(synonyms_12);
    String synonyms_22 = "auto";

    synonyms1.add(synonyms_22);

    synonymHit0.setSynonyms(synonyms1);
    boolean forwardToReplicas0 = true;

    client.saveSynonym(indexName0, objectID0, synonymHit0, forwardToReplicas0);
    ```

- operationId: saveSynonyms
  code : | 
    ```java
    String indexName0 = "indexName";
    List<SynonymHit> synonymHit0 = new ArrayList<>();
    SynonymHit synonymHit_0 = new SynonymHit(); // 1
    String objectID2 = "id1";

    synonymHit_01.setObjectID(objectID2);
    SynonymType type2 = SynonymType.fromValue("synonym");

    synonymHit_01.setType(type2);
    List<String> synonyms2 = new ArrayList<>();
    String synonyms_03 = "car";

    synonyms2.add(synonyms_03);
    String synonyms_13 = "vehicule";

    synonyms2.add(synonyms_13);
    String synonyms_23 = "auto";

    synonyms2.add(synonyms_23);

    synonymHit_01.setSynonyms(synonyms2);

    synonymHit0.add(synonymHit_01);
    SynonymHit synonymHit_1 = new SynonymHit(); // 1
    String objectID2 = "id2";

    synonymHit_11.setObjectID(objectID2);
    SynonymType type2 = SynonymType.fromValue("onewaysynonym");

    synonymHit_11.setType(type2);
    String input2 = "iphone";

    synonymHit_11.setInput(input2);
    List<String> synonyms2 = new ArrayList<>();
    String synonyms_03 = "ephone";

    synonyms2.add(synonyms_03);
    String synonyms_13 = "aphone";

    synonyms2.add(synonyms_13);
    String synonyms_23 = "yphone";

    synonyms2.add(synonyms_23);

    synonymHit_11.setSynonyms(synonyms2);

    synonymHit0.add(synonymHit_11);
    boolean forwardToReplicas0 = true;
    boolean replaceExistingSynonyms0 = false;

    client.saveSynonyms(indexName0, synonymHit0, forwardToReplicas0, replaceExistingSynonyms0);
    ```

- operationId: search
  description: search for a single hits request with minimal parameters
  code : | 
    ```java
    SearchMethodParams searchMethodParams = new SearchMethodParams(); // 0
    List<SearchQuery> requests1 = new ArrayList<>();
    SearchForHits requests_0 = new SearchForHits(); // 2
    String indexName3 = "theIndexName";

    requests_02.setIndexName(indexName3);

    requests1.add(SearchQuery.of(requests_02));

    searchMethodParams0.setRequests(requests1);

    client.search(searchMethodParams0, Object.class);
    ```

- operationId: search
  description: search for a single facet request with minimal parameters
  code : | 
    ```java
    SearchMethodParams searchMethodParams = new SearchMethodParams(); // 0
    List<SearchQuery> requests1 = new ArrayList<>();
    SearchForFacets requests_0 = new SearchForFacets(); // 2
    String indexName3 = "theIndexName";

    requests_02.setIndexName(indexName3);
    SearchTypeFacet type3 = SearchTypeFacet.fromValue("facet");

    requests_02.setType(type3);
    String facet3 = "theFacet";

    requests_02.setFacet(facet3);

    requests1.add(SearchQuery.of(requests_02));

    searchMethodParams0.setRequests(requests1);
    SearchStrategy strategy1 = SearchStrategy.fromValue("stopIfEnoughMatches");

    searchMethodParams0.setStrategy(strategy1);

    client.search(searchMethodParams0, Object.class);
    ```

- operationId: search
  description: search for a single hits request with all parameters
  code : | 
    ```java
    SearchMethodParams searchMethodParams = new SearchMethodParams(); // 0
    List<SearchQuery> requests1 = new ArrayList<>();
    SearchForHits requests_0 = new SearchForHits(); // 2
    String indexName3 = "theIndexName";

    requests_02.setIndexName(indexName3);
    String query3 = "myQuery";

    requests_02.setQuery(query3);
    int hitsPerPage3 = 50;

    requests_02.setHitsPerPage(hitsPerPage3);
    SearchTypeDefault type3 = SearchTypeDefault.fromValue("default");

    requests_02.setType(type3);

    requests1.add(SearchQuery.of(requests_02));

    searchMethodParams0.setRequests(requests1);

    client.search(searchMethodParams0, Object.class);
    ```

- operationId: search
  description: search for a single facet request with all parameters
  code : | 
    ```java
    SearchMethodParams searchMethodParams = new SearchMethodParams(); // 0
    List<SearchQuery> requests1 = new ArrayList<>();
    SearchForFacets requests_0 = new SearchForFacets(); // 2
    String indexName3 = "theIndexName";

    requests_02.setIndexName(indexName3);
    SearchTypeFacet type3 = SearchTypeFacet.fromValue("facet");

    requests_02.setType(type3);
    String facet3 = "theFacet";

    requests_02.setFacet(facet3);
    String facetQuery3 = "theFacetQuery";

    requests_02.setFacetQuery(facetQuery3);
    String query3 = "theQuery";

    requests_02.setQuery(query3);
    int maxFacetHits3 = 50;

    requests_02.setMaxFacetHits(maxFacetHits3);

    requests1.add(SearchQuery.of(requests_02));

    searchMethodParams0.setRequests(requests1);
    SearchStrategy strategy1 = SearchStrategy.fromValue("stopIfEnoughMatches");

    searchMethodParams0.setStrategy(strategy1);

    client.search(searchMethodParams0, Object.class);
    ```

- operationId: search
  description: search for multiple mixed requests in multiple indices with minimal parameters
  code : | 
    ```java
    SearchMethodParams searchMethodParams = new SearchMethodParams(); // 0
    List<SearchQuery> requests1 = new ArrayList<>();
    SearchForHits requests_0 = new SearchForHits(); // 2
    String indexName3 = "theIndexName";

    requests_02.setIndexName(indexName3);

    requests1.add(SearchQuery.of(requests_02));
    SearchForFacets requests_1 = new SearchForFacets(); // 2
    String indexName3 = "theIndexName2";

    requests_12.setIndexName(indexName3);
    SearchTypeFacet type3 = SearchTypeFacet.fromValue("facet");

    requests_12.setType(type3);
    String facet3 = "theFacet";

    requests_12.setFacet(facet3);

    requests1.add(SearchQuery.of(requests_12));
    SearchForHits requests_2 = new SearchForHits(); // 2
    String indexName3 = "theIndexName";

    requests_22.setIndexName(indexName3);
    SearchTypeDefault type3 = SearchTypeDefault.fromValue("default");

    requests_22.setType(type3);

    requests1.add(SearchQuery.of(requests_22));

    searchMethodParams0.setRequests(requests1);
    SearchStrategy strategy1 = SearchStrategy.fromValue("stopIfEnoughMatches");

    searchMethodParams0.setStrategy(strategy1);

    client.search(searchMethodParams0, Object.class);
    ```

- operationId: search
  description: search for multiple mixed requests in multiple indices with all parameters
  code : | 
    ```java
    SearchMethodParams searchMethodParams = new SearchMethodParams(); // 0
    List<SearchQuery> requests1 = new ArrayList<>();
    SearchForFacets requests_0 = new SearchForFacets(); // 2
    String indexName3 = "theIndexName";

    requests_02.setIndexName(indexName3);
    SearchTypeFacet type3 = SearchTypeFacet.fromValue("facet");

    requests_02.setType(type3);
    String facet3 = "theFacet";

    requests_02.setFacet(facet3);
    String facetQuery3 = "theFacetQuery";

    requests_02.setFacetQuery(facetQuery3);
    String query3 = "theQuery";

    requests_02.setQuery(query3);
    int maxFacetHits3 = 50;

    requests_02.setMaxFacetHits(maxFacetHits3);

    requests1.add(SearchQuery.of(requests_02));
    SearchForHits requests_1 = new SearchForHits(); // 2
    String indexName3 = "theIndexName";

    requests_12.setIndexName(indexName3);
    String query3 = "myQuery";

    requests_12.setQuery(query3);
    int hitsPerPage3 = 50;

    requests_12.setHitsPerPage(hitsPerPage3);
    SearchTypeDefault type3 = SearchTypeDefault.fromValue("default");

    requests_12.setType(type3);

    requests1.add(SearchQuery.of(requests_12));

    searchMethodParams0.setRequests(requests1);
    SearchStrategy strategy1 = SearchStrategy.fromValue("stopIfEnoughMatches");

    searchMethodParams0.setStrategy(strategy1);

    client.search(searchMethodParams0, Object.class);
    ```

- operationId: search
  description: search filters accept all of the possible shapes
  code : | 
    ```java
    SearchMethodParams searchMethodParams = new SearchMethodParams(); // 0
    List<SearchQuery> requests1 = new ArrayList<>();
    SearchForHits requests_0 = new SearchForHits(); // 2
    String indexName3 = "theIndexName";

    requests_02.setIndexName(indexName3);
    String facetFilters3 = "mySearch:filters";

    requests_02.setFacetFilters(FacetFilters.of(facetFilters3));
    String reRankingApplyFilter3 = "mySearch:filters";

    requests_02.setReRankingApplyFilter(ReRankingApplyFilter.of(reRankingApplyFilter3));
    String tagFilters3 = "mySearch:filters";

    requests_02.setTagFilters(TagFilters.of(tagFilters3));
    String numericFilters3 = "mySearch:filters";

    requests_02.setNumericFilters(NumericFilters.of(numericFilters3));
    String optionalFilters3 = "mySearch:filters";

    requests_02.setOptionalFilters(OptionalFilters.of(optionalFilters3));

    requests1.add(SearchQuery.of(requests_02));
    SearchForHits requests_1 = new SearchForHits(); // 2
    String indexName3 = "theIndexName";

    requests_12.setIndexName(indexName3);
    List<MixedSearchFilters> facetFilters3 = new ArrayList<>();
    String facetFilters_04 = "mySearch:filters";

    facetFilters3.add(MixedSearchFilters.of(facetFilters_04));
    List<String> facetFilters_14 = new ArrayList<>();
    String facetFilters_1_05 = "mySearch:filters";

    facetFilters_14.add(facetFilters_1_05);

    facetFilters3.add(MixedSearchFilters.of(facetFilters_14));

    requests_12.setFacetFilters(FacetFilters.of(facetFilters3));
    List<MixedSearchFilters> reRankingApplyFilter3 = new ArrayList<>();
    String reRankingApplyFilter_04 = "mySearch:filters";

    reRankingApplyFilter3.add(MixedSearchFilters.of(reRankingApplyFilter_04));
    List<String> reRankingApplyFilter_14 = new ArrayList<>();
    String reRankingApplyFilter_1_05 = "mySearch:filters";

    reRankingApplyFilter_14.add(reRankingApplyFilter_1_05);

    reRankingApplyFilter3.add(MixedSearchFilters.of(reRankingApplyFilter_14));

    requests_12.setReRankingApplyFilter(ReRankingApplyFilter.of(reRankingApplyFilter3));
    List<MixedSearchFilters> tagFilters3 = new ArrayList<>();
    String tagFilters_04 = "mySearch:filters";

    tagFilters3.add(MixedSearchFilters.of(tagFilters_04));
    List<String> tagFilters_14 = new ArrayList<>();
    String tagFilters_1_05 = "mySearch:filters";

    tagFilters_14.add(tagFilters_1_05);

    tagFilters3.add(MixedSearchFilters.of(tagFilters_14));

    requests_12.setTagFilters(TagFilters.of(tagFilters3));
    List<MixedSearchFilters> numericFilters3 = new ArrayList<>();
    String numericFilters_04 = "mySearch:filters";

    numericFilters3.add(MixedSearchFilters.of(numericFilters_04));
    List<String> numericFilters_14 = new ArrayList<>();
    String numericFilters_1_05 = "mySearch:filters";

    numericFilters_14.add(numericFilters_1_05);

    numericFilters3.add(MixedSearchFilters.of(numericFilters_14));

    requests_12.setNumericFilters(NumericFilters.of(numericFilters3));
    List<MixedSearchFilters> optionalFilters3 = new ArrayList<>();
    String optionalFilters_04 = "mySearch:filters";

    optionalFilters3.add(MixedSearchFilters.of(optionalFilters_04));
    List<String> optionalFilters_14 = new ArrayList<>();
    String optionalFilters_1_05 = "mySearch:filters";

    optionalFilters_14.add(optionalFilters_1_05);

    optionalFilters3.add(MixedSearchFilters.of(optionalFilters_14));

    requests_12.setOptionalFilters(OptionalFilters.of(optionalFilters3));

    requests1.add(SearchQuery.of(requests_12));

    searchMethodParams0.setRequests(requests1);

    client.search(searchMethodParams0, Object.class);
    ```

- operationId: search
  description: search with all search parameters
  code : | 
    ```java
    SearchMethodParams searchMethodParams = new SearchMethodParams(); // 0
    List<SearchQuery> requests1 = new ArrayList<>();
    SearchForHits requests_0 = new SearchForHits(); // 2
    String indexName3 = "theIndexName";

    requests_02.setIndexName(indexName3);
    String query3 = "";

    requests_02.setQuery(query3);
    String similarQuery3 = "";

    requests_02.setSimilarQuery(similarQuery3);
    String filters3 = "";

    requests_02.setFilters(filters3);
    List<MixedSearchFilters> facetFilters3 = new ArrayList<>();
    String facetFilters_04 = "";

    facetFilters3.add(MixedSearchFilters.of(facetFilters_04));

    requests_02.setFacetFilters(FacetFilters.of(facetFilters3));
    List<MixedSearchFilters> optionalFilters3 = new ArrayList<>();
    String optionalFilters_04 = "";

    optionalFilters3.add(MixedSearchFilters.of(optionalFilters_04));

    requests_02.setOptionalFilters(OptionalFilters.of(optionalFilters3));
    List<MixedSearchFilters> numericFilters3 = new ArrayList<>();
    String numericFilters_04 = "";

    numericFilters3.add(MixedSearchFilters.of(numericFilters_04));

    requests_02.setNumericFilters(NumericFilters.of(numericFilters3));
    List<MixedSearchFilters> tagFilters3 = new ArrayList<>();
    String tagFilters_04 = "";

    tagFilters3.add(MixedSearchFilters.of(tagFilters_04));

    requests_02.setTagFilters(TagFilters.of(tagFilters3));
    boolean sumOrFiltersScores3 = true;

    requests_02.setSumOrFiltersScores(sumOrFiltersScores3);
    List<String> facets3 = new ArrayList<>();
    String facets_04 = "";

    facets3.add(facets_04);

    requests_02.setFacets(facets3);
    int maxValuesPerFacet3 = 0;

    requests_02.setMaxValuesPerFacet(maxValuesPerFacet3);
    boolean facetingAfterDistinct3 = true;

    requests_02.setFacetingAfterDistinct(facetingAfterDistinct3);
    String sortFacetValuesBy3 = "";

    requests_02.setSortFacetValuesBy(sortFacetValuesBy3);
    int page3 = 0;

    requests_02.setPage(page3);
    int offset3 = 0;

    requests_02.setOffset(offset3);
    int length3 = 0;

    requests_02.setLength(length3);
    String aroundLatLng3 = "";

    requests_02.setAroundLatLng(aroundLatLng3);
    boolean aroundLatLngViaIP3 = true;

    requests_02.setAroundLatLngViaIP(aroundLatLngViaIP3);
    AroundRadiusAll aroundRadius3 = AroundRadiusAll.fromValue("all");

    requests_02.setAroundRadius(AroundRadius.of(aroundRadius3));
    int aroundPrecision3 = 0;

    requests_02.setAroundPrecision(AroundPrecision.of(aroundPrecision3));
    int minimumAroundRadius3 = 0;

    requests_02.setMinimumAroundRadius(minimumAroundRadius3);
    List<Double> insideBoundingBox3 = new ArrayList<>();
    double insideBoundingBox_04 = 47.3165;

    insideBoundingBox3.add(insideBoundingBox_04);
    double insideBoundingBox_14 = 4.9665;

    insideBoundingBox3.add(insideBoundingBox_14);

    requests_02.setInsideBoundingBox(insideBoundingBox3);
    List<Double> insidePolygon3 = new ArrayList<>();
    double insidePolygon_04 = 47.3165;

    insidePolygon3.add(insidePolygon_04);
    double insidePolygon_14 = 4.9665;

    insidePolygon3.add(insidePolygon_14);

    requests_02.setInsidePolygon(insidePolygon3);
    List<String> naturalLanguages3 = new ArrayList<>();
    String naturalLanguages_04 = "";

    naturalLanguages3.add(naturalLanguages_04);

    requests_02.setNaturalLanguages(naturalLanguages3);
    List<String> ruleContexts3 = new ArrayList<>();
    String ruleContexts_04 = "";

    ruleContexts3.add(ruleContexts_04);

    requests_02.setRuleContexts(ruleContexts3);
    int personalizationImpact3 = 0;

    requests_02.setPersonalizationImpact(personalizationImpact3);
    String userToken3 = "";

    requests_02.setUserToken(userToken3);
    boolean getRankingInfo3 = true;

    requests_02.setGetRankingInfo(getRankingInfo3);
    boolean clickAnalytics3 = true;

    requests_02.setClickAnalytics(clickAnalytics3);
    boolean analytics3 = true;

    requests_02.setAnalytics(analytics3);
    List<String> analyticsTags3 = new ArrayList<>();
    String analyticsTags_04 = "";

    analyticsTags3.add(analyticsTags_04);

    requests_02.setAnalyticsTags(analyticsTags3);
    boolean percentileComputation3 = true;

    requests_02.setPercentileComputation(percentileComputation3);
    boolean enableABTest3 = true;

    requests_02.setEnableABTest(enableABTest3);
    boolean enableReRanking3 = true;

    requests_02.setEnableReRanking(enableReRanking3);
    List<MixedSearchFilters> reRankingApplyFilter3 = new ArrayList<>();
    String reRankingApplyFilter_04 = "";

    reRankingApplyFilter3.add(MixedSearchFilters.of(reRankingApplyFilter_04));

    requests_02.setReRankingApplyFilter(ReRankingApplyFilter.of(reRankingApplyFilter3));
    List<String> attributesForFaceting3 = new ArrayList<>();
    String attributesForFaceting_04 = "";

    attributesForFaceting3.add(attributesForFaceting_04);

    requests_02.setAttributesForFaceting(attributesForFaceting3);
    List<String> attributesToRetrieve3 = new ArrayList<>();
    String attributesToRetrieve_04 = "";

    attributesToRetrieve3.add(attributesToRetrieve_04);

    requests_02.setAttributesToRetrieve(attributesToRetrieve3);
    List<String> restrictSearchableAttributes3 = new ArrayList<>();
    String restrictSearchableAttributes_04 = "";

    restrictSearchableAttributes3.add(restrictSearchableAttributes_04);

    requests_02.setRestrictSearchableAttributes(restrictSearchableAttributes3);
    List<String> ranking3 = new ArrayList<>();
    String ranking_04 = "";

    ranking3.add(ranking_04);

    requests_02.setRanking(ranking3);
    List<String> customRanking3 = new ArrayList<>();
    String customRanking_04 = "";

    customRanking3.add(customRanking_04);

    requests_02.setCustomRanking(customRanking3);
    int relevancyStrictness3 = 0;

    requests_02.setRelevancyStrictness(relevancyStrictness3);
    List<String> attributesToHighlight3 = new ArrayList<>();
    String attributesToHighlight_04 = "";

    attributesToHighlight3.add(attributesToHighlight_04);

    requests_02.setAttributesToHighlight(attributesToHighlight3);
    List<String> attributesToSnippet3 = new ArrayList<>();
    String attributesToSnippet_04 = "";

    attributesToSnippet3.add(attributesToSnippet_04);

    requests_02.setAttributesToSnippet(attributesToSnippet3);
    String highlightPreTag3 = "";

    requests_02.setHighlightPreTag(highlightPreTag3);
    String highlightPostTag3 = "";

    requests_02.setHighlightPostTag(highlightPostTag3);
    String snippetEllipsisText3 = "";

    requests_02.setSnippetEllipsisText(snippetEllipsisText3);
    boolean restrictHighlightAndSnippetArrays3 = true;

    requests_02.setRestrictHighlightAndSnippetArrays(restrictHighlightAndSnippetArrays3);
    int hitsPerPage3 = 0;

    requests_02.setHitsPerPage(hitsPerPage3);
    int minWordSizefor1Typo3 = 0;

    requests_02.setMinWordSizefor1Typo(minWordSizefor1Typo3);
    int minWordSizefor2Typos3 = 0;

    requests_02.setMinWordSizefor2Typos(minWordSizefor2Typos3);
    TypoToleranceEnum typoTolerance3 = TypoToleranceEnum.fromValue("min");

    requests_02.setTypoTolerance(TypoTolerance.of(typoTolerance3));
    boolean allowTyposOnNumericTokens3 = true;

    requests_02.setAllowTyposOnNumericTokens(allowTyposOnNumericTokens3);
    List<String> disableTypoToleranceOnAttributes3 = new ArrayList<>();
    String disableTypoToleranceOnAttributes_04 = "";

    disableTypoToleranceOnAttributes3.add(disableTypoToleranceOnAttributes_04);

    requests_02.setDisableTypoToleranceOnAttributes(disableTypoToleranceOnAttributes3);
    boolean ignorePlurals3 = false;

    requests_02.setIgnorePlurals(IgnorePlurals.of(ignorePlurals3));
    boolean removeStopWords3 = true;

    requests_02.setRemoveStopWords(RemoveStopWords.of(removeStopWords3));
    String keepDiacriticsOnCharacters3 = "";

    requests_02.setKeepDiacriticsOnCharacters(keepDiacriticsOnCharacters3);
    List<String> queryLanguages3 = new ArrayList<>();
    String queryLanguages_04 = "";

    queryLanguages3.add(queryLanguages_04);

    requests_02.setQueryLanguages(queryLanguages3);
    boolean decompoundQuery3 = true;

    requests_02.setDecompoundQuery(decompoundQuery3);
    boolean enableRules3 = true;

    requests_02.setEnableRules(enableRules3);
    boolean enablePersonalization3 = true;

    requests_02.setEnablePersonalization(enablePersonalization3);
    QueryType queryType3 = QueryType.fromValue("prefixAll");

    requests_02.setQueryType(queryType3);
    RemoveWordsIfNoResults removeWordsIfNoResults3 = RemoveWordsIfNoResults.fromValue("allOptional");

    requests_02.setRemoveWordsIfNoResults(removeWordsIfNoResults3);
    boolean advancedSyntax3 = true;

    requests_02.setAdvancedSyntax(advancedSyntax3);
    List<String> optionalWords3 = new ArrayList<>();
    String optionalWords_04 = "";

    optionalWords3.add(optionalWords_04);

    requests_02.setOptionalWords(optionalWords3);
    List<String> disableExactOnAttributes3 = new ArrayList<>();
    String disableExactOnAttributes_04 = "";

    disableExactOnAttributes3.add(disableExactOnAttributes_04);

    requests_02.setDisableExactOnAttributes(disableExactOnAttributes3);
    ExactOnSingleWordQuery exactOnSingleWordQuery3 = ExactOnSingleWordQuery.fromValue("attribute");

    requests_02.setExactOnSingleWordQuery(exactOnSingleWordQuery3);
    List<AlternativesAsExact> alternativesAsExact3 = new ArrayList<>();
    AlternativesAsExact alternativesAsExact_04 = AlternativesAsExact.fromValue("multiWordsSynonym");

    alternativesAsExact3.add(alternativesAsExact_04);

    requests_02.setAlternativesAsExact(alternativesAsExact3);
    List<AdvancedSyntaxFeatures> advancedSyntaxFeatures3 = new ArrayList<>();
    AdvancedSyntaxFeatures advancedSyntaxFeatures_04 = AdvancedSyntaxFeatures.fromValue("exactPhrase");

    advancedSyntaxFeatures3.add(advancedSyntaxFeatures_04);

    requests_02.setAdvancedSyntaxFeatures(advancedSyntaxFeatures3);
    int distinct3 = 0;

    requests_02.setDistinct(Distinct.of(distinct3));
    boolean synonyms3 = true;

    requests_02.setSynonyms(synonyms3);
    boolean replaceSynonymsInHighlight3 = true;

    requests_02.setReplaceSynonymsInHighlight(replaceSynonymsInHighlight3);
    int minProximity3 = 0;

    requests_02.setMinProximity(minProximity3);
    List<String> responseFields3 = new ArrayList<>();
    String responseFields_04 = "";

    responseFields3.add(responseFields_04);

    requests_02.setResponseFields(responseFields3);
    boolean attributeCriteriaComputedByMinProximity3 = true;

    requests_02.setAttributeCriteriaComputedByMinProximity(attributeCriteriaComputedByMinProximity3);
    RenderingContent renderingContent = new RenderingContent(); // 3
    FacetOrdering facetOrdering = new FacetOrdering(); // 4
    Facets facets = new Facets(); // 5
    List<String> order6 = new ArrayList<>();
    String order_07 = "a";

    order6.add(order_07);
    String order_17 = "b";

    order6.add(order_17);

    facets5.setOrder(order6);

    facetOrdering4.setFacets(facets5);
    Map<String, Value> values5 = new HashMap<>();
    Value a = new Value(); // 6
    List<String> order7 = new ArrayList<>();
    String order_08 = "b";

    order7.add(order_08);

    a6.setOrder(order7);
    SortRemainingBy sortRemainingBy7 = SortRemainingBy.fromValue("count");

    a6.setSortRemainingBy(sortRemainingBy7);

    values5.put("a", a6);

    facetOrdering4.setValues(values5);

    renderingContent3.setFacetOrdering(facetOrdering4);

    requests_02.setRenderingContent(renderingContent3);
    SearchTypeDefault type3 = SearchTypeDefault.fromValue("default");

    requests_02.setType(type3);

    requests1.add(SearchQuery.of(requests_02));

    searchMethodParams0.setRequests(requests1);

    client.search(searchMethodParams0, Object.class);
    ```

- operationId: searchDictionaryEntries
  description: get searchDictionaryEntries results with minimal parameters
  code : | 
    ```java
    DictionaryType dictionaryName0 = DictionaryType.fromValue("compounds");
    SearchDictionaryEntriesParams searchDictionaryEntriesParams = new SearchDictionaryEntriesParams(); // 0
    String query1 = "foo";

    searchDictionaryEntriesParams0.setQuery(query1);

    client.searchDictionaryEntries(dictionaryName0, searchDictionaryEntriesParams0);
    ```

- operationId: searchDictionaryEntries
  description: get searchDictionaryEntries results with all parameters
  code : | 
    ```java
    DictionaryType dictionaryName0 = DictionaryType.fromValue("compounds");
    SearchDictionaryEntriesParams searchDictionaryEntriesParams = new SearchDictionaryEntriesParams(); // 0
    String query1 = "foo";

    searchDictionaryEntriesParams0.setQuery(query1);
    int page1 = 4;

    searchDictionaryEntriesParams0.setPage(page1);
    int hitsPerPage1 = 2;

    searchDictionaryEntriesParams0.setHitsPerPage(hitsPerPage1);
    String language1 = "fr";

    searchDictionaryEntriesParams0.setLanguage(language1);

    client.searchDictionaryEntries(dictionaryName0, searchDictionaryEntriesParams0);
    ```

- operationId: searchForFacetValues
  description: get searchForFacetValues results with minimal parameters
  code : | 
    ```java
    String indexName0 = "indexName";
    String facetName0 = "facetName";

    client.searchForFacetValues(indexName0, facetName0);
    ```

- operationId: searchForFacetValues
  description: get searchForFacetValues results with all parameters
  code : | 
    ```java
    String indexName0 = "indexName";
    String facetName0 = "facetName";
    SearchForFacetValuesRequest searchForFacetValuesRequest = new SearchForFacetValuesRequest(); // 0
    String params1 = "query=foo&facetFilters=['bar']";

    searchForFacetValuesRequest0.setParams(params1);
    String facetQuery1 = "foo";

    searchForFacetValuesRequest0.setFacetQuery(facetQuery1);
    int maxFacetHits1 = 42;

    searchForFacetValuesRequest0.setMaxFacetHits(maxFacetHits1);

    client.searchForFacetValues(indexName0, facetName0, searchForFacetValuesRequest0);
    ```

- operationId: searchRules
  code : | 
    ```java
    String indexName0 = "indexName";
    SearchRulesParams searchRulesParams = new SearchRulesParams(); // 0
    String query1 = "something";

    searchRulesParams0.setQuery(query1);

    client.searchRules(indexName0, searchRulesParams0);
    ```

- operationId: searchSingleIndex
  description: search with minimal parameters
  code : | 
    ```java
    String indexName0 = "indexName";

    client.searchSingleIndex(indexName0, Object.class);
    ```

- operationId: searchSingleIndex
  description: search with searchParams
  code : | 
    ```java
    String indexName0 = "indexName";
    SearchParamsObject searchParams = new SearchParamsObject(); // 0
    String query1 = "myQuery";

    searchParams0.setQuery(query1);
    List<MixedSearchFilters> facetFilters1 = new ArrayList<>();
    String facetFilters_02 = "tags:algolia";

    facetFilters1.add(MixedSearchFilters.of(facetFilters_02));

    searchParams0.setFacetFilters(FacetFilters.of(facetFilters1));

    client.searchSingleIndex(indexName0, SearchParams.of(searchParams0), Object.class);
    ```

- operationId: searchSynonyms
  description: searchSynonyms with minimal parameters
  code : | 
    ```java
    String indexName0 = "indexName";

    client.searchSynonyms(indexName0);
    ```

- operationId: searchSynonyms
  description: searchSynonyms with all parameters
  code : | 
    ```java
    String indexName0 = "indexName";
    SynonymType type0 = SynonymType.fromValue("altcorrection1");
    int page0 = 10;
    int hitsPerPage0 = 10;
    SearchSynonymsParams searchSynonymsParams = new SearchSynonymsParams(); // 0
    String query1 = "myQuery";

    searchSynonymsParams0.setQuery(query1);

    client.searchSynonyms(indexName0, type0, page0, hitsPerPage0, searchSynonymsParams0);
    ```

- operationId: searchUserIds
  code : | 
    ```java
    SearchUserIdsParams searchUserIdsParams = new SearchUserIdsParams(); // 0
    String query1 = "test";

    searchUserIdsParams0.setQuery(query1);
    String clusterName1 = "theClusterName";

    searchUserIdsParams0.setClusterName(clusterName1);
    int page1 = 5;

    searchUserIdsParams0.setPage(page1);
    int hitsPerPage1 = 10;

    searchUserIdsParams0.setHitsPerPage(hitsPerPage1);

    client.searchUserIds(searchUserIdsParams0);
    ```

- operationId: setDictionarySettings
  description: get setDictionarySettings results with minimal parameters
  code : | 
    ```java
    DictionarySettingsParams dictionarySettingsParams = new DictionarySettingsParams(); // 0
    StandardEntries disableStandardEntries = new StandardEntries(); // 1
    Map<String, Boolean> plurals2 = new HashMap<>();
    boolean fr3 = false;

    plurals2.put("fr", fr3);
    boolean en3 = false;

    plurals2.put("en", en3);
    boolean ru3 = true;

    plurals2.put("ru", ru3);

    disableStandardEntries1.setPlurals(plurals2);

    dictionarySettingsParams0.setDisableStandardEntries(disableStandardEntries1);

    client.setDictionarySettings(dictionarySettingsParams0);
    ```

- operationId: setDictionarySettings
  description: get setDictionarySettings results with all parameters
  code : | 
    ```java
    DictionarySettingsParams dictionarySettingsParams = new DictionarySettingsParams(); // 0
    StandardEntries disableStandardEntries = new StandardEntries(); // 1
    Map<String, Boolean> plurals2 = new HashMap<>();
    boolean fr3 = false;

    plurals2.put("fr", fr3);
    boolean en3 = false;

    plurals2.put("en", en3);
    boolean ru3 = true;

    plurals2.put("ru", ru3);

    disableStandardEntries1.setPlurals(plurals2);
    Map<String, Boolean> stopwords2 = new HashMap<>();
    boolean fr3 = false;

    stopwords2.put("fr", fr3);

    disableStandardEntries1.setStopwords(stopwords2);
    Map<String, Boolean> compounds2 = new HashMap<>();
    boolean ru3 = true;

    compounds2.put("ru", ru3);

    disableStandardEntries1.setCompounds(compounds2);

    dictionarySettingsParams0.setDisableStandardEntries(disableStandardEntries1);

    client.setDictionarySettings(dictionarySettingsParams0);
    ```

- operationId: setSettings
  description: setSettings with minimal parameters
  code : | 
    ```java
    String indexName0 = "theIndexName";
    IndexSettings indexSettings = new IndexSettings(); // 0
    int paginationLimitedTo1 = 10;

    indexSettings0.setPaginationLimitedTo(paginationLimitedTo1);
    boolean forwardToReplicas0 = true;

    client.setSettings(indexName0, indexSettings0, forwardToReplicas0);
    ```

- operationId: setSettings
  description: setSettings allow boolean `typoTolerance`
  code : | 
    ```java
    String indexName0 = "theIndexName";
    IndexSettings indexSettings = new IndexSettings(); // 0
    boolean typoTolerance1 = true;

    indexSettings0.setTypoTolerance(TypoTolerance.of(typoTolerance1));
    boolean forwardToReplicas0 = true;

    client.setSettings(indexName0, indexSettings0, forwardToReplicas0);
    ```

- operationId: setSettings
  description: setSettings allow enum `typoTolerance`
  code : | 
    ```java
    String indexName0 = "theIndexName";
    IndexSettings indexSettings = new IndexSettings(); // 0
    TypoToleranceEnum typoTolerance1 = TypoToleranceEnum.fromValue("min");

    indexSettings0.setTypoTolerance(TypoTolerance.of(typoTolerance1));
    boolean forwardToReplicas0 = true;

    client.setSettings(indexName0, indexSettings0, forwardToReplicas0);
    ```

- operationId: setSettings
  description: setSettings allow boolean `ignorePlurals`
  code : | 
    ```java
    String indexName0 = "theIndexName";
    IndexSettings indexSettings = new IndexSettings(); // 0
    boolean ignorePlurals1 = true;

    indexSettings0.setIgnorePlurals(IgnorePlurals.of(ignorePlurals1));
    boolean forwardToReplicas0 = true;

    client.setSettings(indexName0, indexSettings0, forwardToReplicas0);
    ```

- operationId: setSettings
  description: setSettings allow list of string `ignorePlurals`
  code : | 
    ```java
    String indexName0 = "theIndexName";
    IndexSettings indexSettings = new IndexSettings(); // 0
    List<String> ignorePlurals1 = new ArrayList<>();
    String ignorePlurals_02 = "algolia";

    ignorePlurals1.add(ignorePlurals_02);

    indexSettings0.setIgnorePlurals(IgnorePlurals.of(ignorePlurals1));
    boolean forwardToReplicas0 = true;

    client.setSettings(indexName0, indexSettings0, forwardToReplicas0);
    ```

- operationId: setSettings
  description: setSettings allow boolean `removeStopWords`
  code : | 
    ```java
    String indexName0 = "theIndexName";
    IndexSettings indexSettings = new IndexSettings(); // 0
    boolean removeStopWords1 = true;

    indexSettings0.setRemoveStopWords(RemoveStopWords.of(removeStopWords1));
    boolean forwardToReplicas0 = true;

    client.setSettings(indexName0, indexSettings0, forwardToReplicas0);
    ```

- operationId: setSettings
  description: setSettings allow list of string `removeStopWords`
  code : | 
    ```java
    String indexName0 = "theIndexName";
    IndexSettings indexSettings = new IndexSettings(); // 0
    List<String> removeStopWords1 = new ArrayList<>();
    String removeStopWords_02 = "algolia";

    removeStopWords1.add(removeStopWords_02);

    indexSettings0.setRemoveStopWords(RemoveStopWords.of(removeStopWords1));
    boolean forwardToReplicas0 = true;

    client.setSettings(indexName0, indexSettings0, forwardToReplicas0);
    ```

- operationId: setSettings
  description: setSettings allow boolean `distinct`
  code : | 
    ```java
    String indexName0 = "theIndexName";
    IndexSettings indexSettings = new IndexSettings(); // 0
    boolean distinct1 = true;

    indexSettings0.setDistinct(Distinct.of(distinct1));
    boolean forwardToReplicas0 = true;

    client.setSettings(indexName0, indexSettings0, forwardToReplicas0);
    ```

- operationId: setSettings
  description: setSettings allow integers for `distinct`
  code : | 
    ```java
    String indexName0 = "theIndexName";
    IndexSettings indexSettings = new IndexSettings(); // 0
    int distinct1 = 1;

    indexSettings0.setDistinct(Distinct.of(distinct1));
    boolean forwardToReplicas0 = true;

    client.setSettings(indexName0, indexSettings0, forwardToReplicas0);
    ```

- operationId: setSettings
  description: setSettings allow all `indexSettings`
  code : | 
    ```java
    String indexName0 = "theIndexName";
    IndexSettings indexSettings = new IndexSettings(); // 0
    List<String> replicas1 = new ArrayList<>();
    String replicas_02 = "";

    replicas1.add(replicas_02);

    indexSettings0.setReplicas(replicas1);
    int paginationLimitedTo1 = 0;

    indexSettings0.setPaginationLimitedTo(paginationLimitedTo1);
    List<String> disableTypoToleranceOnWords1 = new ArrayList<>();
    String disableTypoToleranceOnWords_02 = "algolia";

    disableTypoToleranceOnWords1.add(disableTypoToleranceOnWords_02);

    indexSettings0.setDisableTypoToleranceOnWords(disableTypoToleranceOnWords1);
    List<String> attributesToTransliterate1 = new ArrayList<>();
    String attributesToTransliterate_02 = "algolia";

    attributesToTransliterate1.add(attributesToTransliterate_02);

    indexSettings0.setAttributesToTransliterate(attributesToTransliterate1);
    List<String> camelCaseAttributes1 = new ArrayList<>();
    String camelCaseAttributes_02 = "algolia";

    camelCaseAttributes1.add(camelCaseAttributes_02);

    indexSettings0.setCamelCaseAttributes(camelCaseAttributes1);
    Map<String, String> decompoundedAttributes1 = new HashMap<>();
    String algolia2 = "aloglia";

    decompoundedAttributes1.put("algolia", algolia2);

    indexSettings0.setDecompoundedAttributes(decompoundedAttributes1);
    List<String> indexLanguages1 = new ArrayList<>();
    String indexLanguages_02 = "algolia";

    indexLanguages1.add(indexLanguages_02);

    indexSettings0.setIndexLanguages(indexLanguages1);
    List<String> disablePrefixOnAttributes1 = new ArrayList<>();
    String disablePrefixOnAttributes_02 = "algolia";

    disablePrefixOnAttributes1.add(disablePrefixOnAttributes_02);

    indexSettings0.setDisablePrefixOnAttributes(disablePrefixOnAttributes1);
    boolean allowCompressionOfIntegerArray1 = true;

    indexSettings0.setAllowCompressionOfIntegerArray(allowCompressionOfIntegerArray1);
    List<String> numericAttributesForFiltering1 = new ArrayList<>();
    String numericAttributesForFiltering_02 = "algolia";

    numericAttributesForFiltering1.add(numericAttributesForFiltering_02);

    indexSettings0.setNumericAttributesForFiltering(numericAttributesForFiltering1);
    String separatorsToIndex1 = "algolia";

    indexSettings0.setSeparatorsToIndex(separatorsToIndex1);
    List<String> searchableAttributes1 = new ArrayList<>();
    String searchableAttributes_02 = "algolia";

    searchableAttributes1.add(searchableAttributes_02);

    indexSettings0.setSearchableAttributes(searchableAttributes1);
    Map<String, String> userData1 = new HashMap<>();
    String user2 = "data";

    userData1.put("user", user2);

    indexSettings0.setUserData(userData1);
    Map<String, Map<String, String>> customNormalization1 = new HashMap<>();
    Map<String, String> algolia2 = new HashMap<>();
    String aloglia3 = "aglolia";

    algolia2.put("aloglia", aloglia3);

    customNormalization1.put("algolia", algolia2);

    indexSettings0.setCustomNormalization(customNormalization1);
    List<String> attributesForFaceting1 = new ArrayList<>();
    String attributesForFaceting_02 = "algolia";

    attributesForFaceting1.add(attributesForFaceting_02);

    indexSettings0.setAttributesForFaceting(attributesForFaceting1);
    List<String> unretrievableAttributes1 = new ArrayList<>();
    String unretrievableAttributes_02 = "algolia";

    unretrievableAttributes1.add(unretrievableAttributes_02);

    indexSettings0.setUnretrievableAttributes(unretrievableAttributes1);
    List<String> attributesToRetrieve1 = new ArrayList<>();
    String attributesToRetrieve_02 = "algolia";

    attributesToRetrieve1.add(attributesToRetrieve_02);

    indexSettings0.setAttributesToRetrieve(attributesToRetrieve1);
    List<String> restrictSearchableAttributes1 = new ArrayList<>();
    String restrictSearchableAttributes_02 = "algolia";

    restrictSearchableAttributes1.add(restrictSearchableAttributes_02);

    indexSettings0.setRestrictSearchableAttributes(restrictSearchableAttributes1);
    List<String> ranking1 = new ArrayList<>();
    String ranking_02 = "geo";

    ranking1.add(ranking_02);

    indexSettings0.setRanking(ranking1);
    List<String> customRanking1 = new ArrayList<>();
    String customRanking_02 = "algolia";

    customRanking1.add(customRanking_02);

    indexSettings0.setCustomRanking(customRanking1);
    int relevancyStrictness1 = 10;

    indexSettings0.setRelevancyStrictness(relevancyStrictness1);
    List<String> attributesToHighlight1 = new ArrayList<>();
    String attributesToHighlight_02 = "algolia";

    attributesToHighlight1.add(attributesToHighlight_02);

    indexSettings0.setAttributesToHighlight(attributesToHighlight1);
    List<String> attributesToSnippet1 = new ArrayList<>();
    String attributesToSnippet_02 = "algolia";

    attributesToSnippet1.add(attributesToSnippet_02);

    indexSettings0.setAttributesToSnippet(attributesToSnippet1);
    String highlightPreTag1 = "<span>";

    indexSettings0.setHighlightPreTag(highlightPreTag1);
    String highlightPostTag1 = "</span>";

    indexSettings0.setHighlightPostTag(highlightPostTag1);
    String snippetEllipsisText1 = "---";

    indexSettings0.setSnippetEllipsisText(snippetEllipsisText1);
    boolean restrictHighlightAndSnippetArrays1 = true;

    indexSettings0.setRestrictHighlightAndSnippetArrays(restrictHighlightAndSnippetArrays1);
    int hitsPerPage1 = 10;

    indexSettings0.setHitsPerPage(hitsPerPage1);
    int minWordSizefor1Typo1 = 5;

    indexSettings0.setMinWordSizefor1Typo(minWordSizefor1Typo1);
    int minWordSizefor2Typos1 = 11;

    indexSettings0.setMinWordSizefor2Typos(minWordSizefor2Typos1);
    boolean typoTolerance1 = false;

    indexSettings0.setTypoTolerance(TypoTolerance.of(typoTolerance1));
    boolean allowTyposOnNumericTokens1 = true;

    indexSettings0.setAllowTyposOnNumericTokens(allowTyposOnNumericTokens1);
    List<String> disableTypoToleranceOnAttributes1 = new ArrayList<>();
    String disableTypoToleranceOnAttributes_02 = "algolia";

    disableTypoToleranceOnAttributes1.add(disableTypoToleranceOnAttributes_02);

    indexSettings0.setDisableTypoToleranceOnAttributes(disableTypoToleranceOnAttributes1);
    boolean ignorePlurals1 = false;

    indexSettings0.setIgnorePlurals(IgnorePlurals.of(ignorePlurals1));
    boolean removeStopWords1 = false;

    indexSettings0.setRemoveStopWords(RemoveStopWords.of(removeStopWords1));
    String keepDiacriticsOnCharacters1 = "abc";

    indexSettings0.setKeepDiacriticsOnCharacters(keepDiacriticsOnCharacters1);
    List<String> queryLanguages1 = new ArrayList<>();
    String queryLanguages_02 = "algolia";

    queryLanguages1.add(queryLanguages_02);

    indexSettings0.setQueryLanguages(queryLanguages1);
    boolean decompoundQuery1 = false;

    indexSettings0.setDecompoundQuery(decompoundQuery1);
    boolean enableRules1 = false;

    indexSettings0.setEnableRules(enableRules1);
    boolean enablePersonalization1 = true;

    indexSettings0.setEnablePersonalization(enablePersonalization1);
    QueryType queryType1 = QueryType.fromValue("prefixLast");

    indexSettings0.setQueryType(queryType1);
    RemoveWordsIfNoResults removeWordsIfNoResults1 = RemoveWordsIfNoResults.fromValue("lastWords");

    indexSettings0.setRemoveWordsIfNoResults(removeWordsIfNoResults1);
    boolean advancedSyntax1 = true;

    indexSettings0.setAdvancedSyntax(advancedSyntax1);
    List<String> optionalWords1 = new ArrayList<>();
    String optionalWords_02 = "algolia";

    optionalWords1.add(optionalWords_02);

    indexSettings0.setOptionalWords(optionalWords1);
    List<String> disableExactOnAttributes1 = new ArrayList<>();
    String disableExactOnAttributes_02 = "algolia";

    disableExactOnAttributes1.add(disableExactOnAttributes_02);

    indexSettings0.setDisableExactOnAttributes(disableExactOnAttributes1);
    ExactOnSingleWordQuery exactOnSingleWordQuery1 = ExactOnSingleWordQuery.fromValue("attribute");

    indexSettings0.setExactOnSingleWordQuery(exactOnSingleWordQuery1);
    List<AlternativesAsExact> alternativesAsExact1 = new ArrayList<>();
    AlternativesAsExact alternativesAsExact_02 = AlternativesAsExact.fromValue("singleWordSynonym");

    alternativesAsExact1.add(alternativesAsExact_02);

    indexSettings0.setAlternativesAsExact(alternativesAsExact1);
    List<AdvancedSyntaxFeatures> advancedSyntaxFeatures1 = new ArrayList<>();
    AdvancedSyntaxFeatures advancedSyntaxFeatures_02 = AdvancedSyntaxFeatures.fromValue("exactPhrase");

    advancedSyntaxFeatures1.add(advancedSyntaxFeatures_02);

    indexSettings0.setAdvancedSyntaxFeatures(advancedSyntaxFeatures1);
    int distinct1 = 3;

    indexSettings0.setDistinct(Distinct.of(distinct1));
    String attributeForDistinct1 = "test";

    indexSettings0.setAttributeForDistinct(attributeForDistinct1);
    boolean synonyms1 = false;

    indexSettings0.setSynonyms(synonyms1);
    boolean replaceSynonymsInHighlight1 = true;

    indexSettings0.setReplaceSynonymsInHighlight(replaceSynonymsInHighlight1);
    int minProximity1 = 6;

    indexSettings0.setMinProximity(minProximity1);
    List<String> responseFields1 = new ArrayList<>();
    String responseFields_02 = "algolia";

    responseFields1.add(responseFields_02);

    indexSettings0.setResponseFields(responseFields1);
    int maxFacetHits1 = 50;

    indexSettings0.setMaxFacetHits(maxFacetHits1);
    boolean attributeCriteriaComputedByMinProximity1 = true;

    indexSettings0.setAttributeCriteriaComputedByMinProximity(attributeCriteriaComputedByMinProximity1);
    RenderingContent renderingContent = new RenderingContent(); // 1
    FacetOrdering facetOrdering = new FacetOrdering(); // 2
    Facets facets = new Facets(); // 3
    List<String> order4 = new ArrayList<>();
    String order_05 = "a";

    order4.add(order_05);
    String order_15 = "b";

    order4.add(order_15);

    facets3.setOrder(order4);

    facetOrdering2.setFacets(facets3);
    Map<String, Value> values3 = new HashMap<>();
    Value a = new Value(); // 4
    List<String> order5 = new ArrayList<>();
    String order_06 = "b";

    order5.add(order_06);

    a4.setOrder(order5);
    SortRemainingBy sortRemainingBy5 = SortRemainingBy.fromValue("count");

    a4.setSortRemainingBy(sortRemainingBy5);

    values3.put("a", a4);

    facetOrdering2.setValues(values3);

    renderingContent1.setFacetOrdering(facetOrdering2);

    indexSettings0.setRenderingContent(renderingContent1);

    client.setSettings(indexName0, indexSettings0);
    ```

- operationId: updateApiKey
  code : | 
    ```java
    String key0 = "myApiKey";
    ApiKey apiKey = new ApiKey(); // 0
    List<Acl> acl1 = new ArrayList<>();
    Acl acl_02 = Acl.fromValue("search");

    acl1.add(acl_02);
    Acl acl_12 = Acl.fromValue("addObject");

    acl1.add(acl_12);

    apiKey0.setAcl(acl1);
    int validity1 = 300;

    apiKey0.setValidity(validity1);
    int maxQueriesPerIPPerHour1 = 100;

    apiKey0.setMaxQueriesPerIPPerHour(maxQueriesPerIPPerHour1);
    int maxHitsPerQuery1 = 20;

    apiKey0.setMaxHitsPerQuery(maxHitsPerQuery1);

    client.updateApiKey(key0, apiKey0);
    ```

